<template>
  <div>
    <div class="loading-message" v-show="!searchStore.products.length">
      Loading products...
    </div>
    <div class="collection-wrapper" v-show="searchStore.products.length">
      <section class="filter-section">
        <div class="facets p-6" :class="{ border: openFacets }">
          <FacetToggle :handler="toggleFacets" :open="openFacets" :vw="vw" />
          <div v-show="openFacets">
            <Option
              v-for="(option, index) in searchStore.options"
              :key="index"
              :option="option"
              :manager="manager"
            />
            <Slider
              v-for="(slider, index) in searchStore.sliders"
              :key="index"
              :slider="slider"
              :manager="manager"
            />
          </div>
        </div>
      </section>
      <section class="results-section">
        <div class="sorting-options">
          <select
            class="border py-2 px-3"
            v-model="searchStore.sorting"
            @change="updateSort"
          >
            <option :value="KlevuSearchSorting.Relevance">Relevance</option>
            <option :value="KlevuSearchSorting.PriceAsc">
              Price: Low to high
            </option>
            <option :value="KlevuSearchSorting.PriceDesc">
              Price: Hight to low
            </option>
          </select>
        </div>
        <div class="product-results">
          <Product
            v-for="product in searchStore.products"
            :key="product.id"
            :product="product"
            @click="productClickHandler(product.id)"
            classes="p-2 md:w-1/3 lg:w-1/4 mb-5"
          />
          <div class="w-full" v-if="searchStore.showMore">
            <button class="btn" @click="fetchMore">Load more</button>
          </div>
        </div>
      </section>
      <!-- <div>
      {{ $route.params.handle }}
      {{ $route.path.substring(1).split("/") }}
    </div> -->
    </div>
  </div>
</template>

<script script>
import {
  KlevuSearchSorting,
  listFilters,
  applyFilterWithManager,
  KlevuFetch,
  KlevuDomEvents,
  sendMerchandisingViewEvent,
  FilterManager,
  categoryMerchandising,
} from "@klevu/core"
import useSearch from "../../stores/searchStore"

definePageMeta({
  layout: "search-results",
})

const route = useRoute()
const searchStore = useSearch()
const manager = new FilterManager()
let prevRes
let productClickManager

const initialFetch = async () => {
  searchStore.setProducts([])
  // await nextTick()

  const res = await KlevuFetch(
    categoryMerchandising(
      route.params.handle,
      {
        id: "search",
        limit: 36,
        sort: searchStore.sorting,
      },
      listFilters({
        rangeFilterSettings: [
          {
            key: "klevu_price",
            minMax: true,
          },
        ],
        exclude: searchStore.collectionFilterExcludes,
        filterManager: manager,
      }),
      applyFilterWithManager(manager),
      sendMerchandisingViewEvent(route.params.handle)
    )
  )
  prevRes = res

  const searchResult = res.queriesById("search")
  if (!searchResult) {
    return
  }
  // console.log(searchResult)

  productClickManager = searchResult.getCategoryMerchandisingClickSendEvent()

  searchStore.showMore = Boolean(res.next)
  searchStore.setOptions(manager.options)
  searchStore.setSliders(manager.sliders)
  searchStore.setProducts(searchResult.records ?? [])
}

const fetchMore = async () => {
  const nextRes = await prevRes.next({
    filterManager: manager,
  })
  searchStore.setProducts([
    ...searchStore.products,
    ...(nextRes.queriesById("search").records ?? []),
  ])
  prevRes = nextRes
  searchStore.showMore = Boolean(nextRes.next)
}

const updateSort = (e) => {
  searchStore.sorting = e.target.value
  initialFetch()
}

const productClickHandler = (id) => {
  productClickManager(id, route.params.handle)
}
//searchStore.resetSearch();
initialFetch()
</script>
