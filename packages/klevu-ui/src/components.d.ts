/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FilterManager, KlevuFilterResultOptions, KlevuFilterResultSlider, KlevuQueryResult, KlevuRecord, KlevuSearchSorting } from "@klevu/core";
import { KlevuDropdownVariant } from "./components/klevu-dropdown/klevu-dropdown";
import { KlevuFacetMode } from "./components/klevu-facet/klevu-facet";
import { KlevuFacetMode as KlevuFacetMode1 } from "./components/klevu-facet/klevu-facet";
import { KlevuUIGlobalSettings } from "./utils/utils";
import { KlevuProductSlots } from "./components/klevu-product/klevu-product";
import { Placement } from "@floating-ui/dom";
import { KlevuProductOnProductClick, KlevuProductVariant } from "./components/klevu-product/klevu-product";
import { AllQueryOptions } from "./components/klevu-query/klevu-query";
import { SearchFieldVariant } from "./components/klevu-search-field/klevu-search-field";
import { SearchFieldVariant as SearchFieldVariant1, SearchResultsEventData, SuggestionsEventData } from "./components/klevu-search-field/klevu-search-field";
import { KlevuDropdownVariant as KlevuDropdownVariant1 } from "./components";
import { KlevuTextfieldVariant } from "./components/klevu-textfield/klevu-textfield";
import { KlevuTypographyVariant } from "./components/klevu-typography/klevu-typography";
import { ViewportSize } from "./components/klevu-util-viewport/klevu-util-viewport";
export { FilterManager, KlevuFilterResultOptions, KlevuFilterResultSlider, KlevuQueryResult, KlevuRecord, KlevuSearchSorting } from "@klevu/core";
export { KlevuDropdownVariant } from "./components/klevu-dropdown/klevu-dropdown";
export { KlevuFacetMode } from "./components/klevu-facet/klevu-facet";
export { KlevuFacetMode as KlevuFacetMode1 } from "./components/klevu-facet/klevu-facet";
export { KlevuUIGlobalSettings } from "./utils/utils";
export { KlevuProductSlots } from "./components/klevu-product/klevu-product";
export { Placement } from "@floating-ui/dom";
export { KlevuProductOnProductClick, KlevuProductVariant } from "./components/klevu-product/klevu-product";
export { AllQueryOptions } from "./components/klevu-query/klevu-query";
export { SearchFieldVariant } from "./components/klevu-search-field/klevu-search-field";
export { SearchFieldVariant as SearchFieldVariant1, SearchResultsEventData, SuggestionsEventData } from "./components/klevu-search-field/klevu-search-field";
export { KlevuDropdownVariant as KlevuDropdownVariant1 } from "./components";
export { KlevuTextfieldVariant } from "./components/klevu-textfield/klevu-textfield";
export { KlevuTypographyVariant } from "./components/klevu-typography/klevu-typography";
export { ViewportSize } from "./components/klevu-util-viewport/klevu-util-viewport";
export namespace Components {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface KlevuAccordion {
        /**
          * is accordion open
         */
        "open": boolean;
        /**
          * Should it initially be open
         */
        "startOpen"?: boolean;
    }
    /**
     * Basic badge component. Can be used to display small information on top of other elements.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface KlevuBadge {
        /**
          * Setting a acceent color to badge
         */
        "accent"?: number;
        /**
          * Setting a neutral color to badge
         */
        "neutral"?: number;
    }
    /**
     * Basic button component
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     */
    interface KlevuButton {
        /**
          * Is button disabled
         */
        "disabled"?: boolean;
        /**
          * Make button display block
         */
        "fullWidth"?: boolean;
        /**
          * Toned down secondary button
         */
        "isSecondary"?: boolean;
    }
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface KlevuCheckbox {
        /**
          * Is checkbox checked
         */
        "checked"?: boolean;
        /**
          * Is disabled
         */
        "disabled"?: boolean;
        /**
          * Name of the checkbox
         */
        "name"?: string;
    }
    /**
     * Component to display list of CMS page results
     */
    interface KlevuCmsList {
        /**
          * Caption of the listing
         */
        "caption": string;
        /**
          * Should use url parameter from link to create anchor
         */
        "link"?: boolean;
        /**
          * List of Klevu results records with type of Page
         */
        "pages": Array<Partial<KlevuRecord>>;
    }
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     */
    interface KlevuDrawer {
        /**
          * Anchor to right or left side of the page
         */
        "anchor": "right" | "left";
        /**
          * Display dim background on top of other content
         */
        "background"?: boolean;
        /**
          * Close by clicking outside of drawer
         */
        "closeAtOutsideClick": boolean;
        "closeModal": () => Promise<void>;
        /**
          * Add little bit of padding to content of drawer
         */
        "insertYPadding"?: boolean;
        "openModal": () => Promise<void>;
        /**
          * Start side drawer open
         */
        "startOpen"?: boolean;
    }
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface KlevuDropdown {
        /**
          * Is element disabled
         */
        "disabled"?: boolean;
        /**
          * Form name
         */
        "name": string;
        /**
          * Options to display in dropdown
         */
        "options": Array<{ value: string; text: String }>;
        /**
          * Which element value is selected
         */
        "selected": string;
        /**
          * Variant of dropdown
         */
        "variant": KlevuDropdownVariant;
    }
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart heading - Heading of the facet
     */
    interface KlevuFacet {
        /**
          * Should the facet be in accordion
         */
        "accordion"?: boolean;
        /**
          * Start accordion open
         */
        "accordionStartOpen"?: boolean;
        /**
          * Set predefined order for options. Unfound values are in original order in end
         */
        "customOrder"?: string[];
        /**
          * Originating filter manager which to modify. This is the most important property of the component. It will be used to modify the filter state for queries.
         */
        "manager": FilterManager;
        /**
          * Which mode should facets be in
         */
        "mode": KlevuFacetMode;
        /**
          * From which options to build facet. Single option value from Klevu SDK FilterManager. Either this or slider must be set.
         */
        "option"?: KlevuFilterResultOptions;
        /**
          * From which slider to build facet.
         */
        "slider"?: KlevuFilterResultSlider;
    }
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface KlevuFacetList {
        /**
          * Should use accordions to for facets
         */
        "accordion"?: boolean;
        /**
          * Button text for Apply button when using `useApplyButton`
         */
        "applyButtonText": string;
        /**
          * Button text for Clear button when using `useApplyButton`
         */
        "clearButtonText": string;
        /**
          * Custom order keys for every facet
         */
        "customOrder"?: { [key: string]: string[] };
        /**
          * Filter managet from which the list is built from
         */
        "manager": FilterManager;
        /**
          * Set mode for facets or if object is passed then define per key
         */
        "mode"?: KlevuFacetMode1 | { [key: string]: KlevuFacetMode1 };
        /**
          * Display "apply filters" button in the end. And do not apply filters until this button is pressed
         */
        "useApplyButton"?: boolean;
    }
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface KlevuInit {
        /**
          * Read only API key to Klevu
         */
        "apiKey": string;
        /**
          * Global settings
         */
        "settings"?: KlevuUIGlobalSettings;
        /**
          * Klevu Server URL
         */
        "url": string;
    }
    /**
     * Lists latest searches user has made on the site
     */
    interface KlevuLatestSearches {
        /**
          * Caption of the list
         */
        "caption": string;
    }
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface KlevuLayoutResults {
        /**
          * Can be used to close the drawer programmatically
         */
        "closeDrawer": () => Promise<void>;
    }
    /**
     * Single list item for listing things.
     */
    interface KlevuList {
        /**
          * Condensed version of the list item.
         */
        "condensed": boolean;
        /**
          * Icon to be displayed in the list item. Cannot be used with image.
         */
        "icon"?: string;
        /**
          * Image to be displayed in the list item. Cannot be used with icon.
         */
        "image"?: string;
        "noXPadding": boolean;
        /**
          * Make the whole thing clickable and navigate to this url.
         */
        "url"?: string;
    }
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface KlevuMerchandising {
        /**
          * Which category products
         */
        "category": string;
        /**
          * Category title
         */
        "categoryTitle": string;
        /**
          * How many filters per facet to show
         */
        "filterCount"?: number;
        /**
          * Order filters in given order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Count of products for page
         */
        "limit": number;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * Order of results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Should display pagination instead of load next
         */
        "usePagination"?: boolean;
    }
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface KlevuPagination {
        /**
          * Current page
         */
        "current"?: number;
        /**
          * Max page
         */
        "max"?: number;
        /**
          * Min page
         */
        "min"?: number;
        /**
          * Query results used to build min, max and current
         */
        "queryResult"?: KlevuQueryResult;
    }
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface KlevuPopularSearches {
        /**
          * Caption of the list
         */
        "caption": string;
    }
    /**
     * Popup component where clicking origin component popups the the content
     */
    interface KlevuPopup {
        /**
          * Anchor popup to left or right of page
         */
        "anchor": Placement;
        /**
          * Close popup when clicking outside content area
         */
        "closeAtOutsideClick": boolean;
        /**
          * Closes the popup
         */
        "closeModal": () => Promise<void>;
        /**
          * At minimum popup content should be the widht of the origin
         */
        "fullwidthContent": boolean;
        /**
          * Open content when origin component is focused
         */
        "openAtFocus": boolean;
        /**
          * Opens the popup
         */
        "openModal": () => Promise<void>;
        /**
          * Initially show the popup
         */
        "startOpen"?: boolean;
    }
    /**
     * Generic product component that renders product based on KlevuRecord of @klevu/core
     * All parts of the component can be replaced with slots.
     * @csspart image - The image element of component
     * @csspart container - The container element of whole
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     */
    interface KlevuProduct {
        /**
          * Force certain width for product. Do not use max-width
         */
        "fixedWidth"?: boolean;
        /**
          * Hides brand information
         */
        "hideBrand"?: boolean;
        /**
          * Hides description from info
         */
        "hideDescription"?: boolean;
        /**
          * Hides image
         */
        "hideImage"?: boolean;
        /**
          * Hides name from info
         */
        "hideName"?: boolean;
        /**
          * Hides price from info
         */
        "hidePrice"?: boolean;
        /**
          * Do not show swatches in products
         */
        "hideSwatches"?: boolean;
        /**
          * Product data
         */
        "product"?: Partial<KlevuRecord>;
        /**
          * What variant of product to render
         */
        "variant": KlevuProductVariant;
    }
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-large spacing between grid items;
     */
    interface KlevuProductGrid {
        /**
          * Place products in grid with this many products
         */
        "itemsPerRow"?: number;
    }
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface KlevuQuery {
        /**
          * Which category to do merchandising. Required for "merchandising" type
         */
        "category"?: string;
        /**
          * Which category title to have on page. Required for "merchandising" type
         */
        "categoryTitle"?: string;
        /**
          * Force component to fetch results again
         */
        "fetchAgain": () => Promise<void>;
        /**
          * To how many filters limit results to
         */
        "filterCount"?: number;
        /**
          * What's the limit on page
         */
        "limit"?: number;
        /**
          * @klevu /core FilterManager used for filters. If none is set, new one is created
         */
        "manager": FilterManager;
        /**
          * Offset of results
         */
        "offset"?: number;
        /**
          * Object to override and settings on search options
         */
        "options"?: AllQueryOptions;
        /**
          * Which recommendation to fetch from Klevu Merchant Center. Required for "recommendation" type
         */
        "recommendationId"?: string;
        /**
          * What to search. Required for "search" type.
         */
        "searchTerm"?: string;
        /**
          * Should search view event be sent. View event is important for analytical cases. In case of a search this should be used only when creating a landing page for search.
         */
        "sendSearchViewEvent"?: boolean;
        /**
          * How to sort
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What kind of query
         */
        "type": "search" | "merchandising" | "recommendation";
        /**
          * Should component listen to changes to filters
         */
        "updateOnFilterChange"?: boolean;
    }
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface KlevuQuicksearch {
        /**
          * What term should be used if there isn't enough results
         */
        "fallbackTerm"?: string;
        /**
          * Placeholder for input text
         */
        "placeholder"?: string;
        /**
          * Anchor popup to witch side
         */
        "popupAnchor"?: Placement;
        /**
          * Function to render custom products. Result has to be native HTML element or a string. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * Should component search for categories too
         */
        "searchCategories"?: boolean;
        /**
          * Should component search for CMS pages too
         */
        "searchCmsPages"?: boolean;
        /**
          * Change variant of the search field
         */
        "searchFieldVariant": SearchFieldVariant;
        /**
          * Text of search button
         */
        "searchText"?: string;
    }
    /**
     * Full recommendation banner solution
     */
    interface KlevuRecommendations {
        /**
          * For cart recommendation you need to provide product id's in cart
         */
        "cartProductIds"?: string[];
        /**
          * For category product recommendation you need to provide categery path
         */
        "categoryPath"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "currentProductId"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "itemGroupId"?: string;
        /**
          * The ID of the recommendation
         */
        "recommendationId": string;
        /**
          * Title of the recommendation
         */
        "recommendationTitle": string;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
    }
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface KlevuSearchField {
        /**
          * Fallback term to use if there are no results
         */
        "fallbackTerm"?: string;
        /**
          * Maximum amount of results
         */
        "limit": number;
        /**
          * The placeholder text to display in the search field.
         */
        "placeholder": string;
        /**
          * Should try to find categories as well
         */
        "searchCategories"?: boolean;
        /**
          * Should try to find cms pages as well
         */
        "searchCmsPages"?: boolean;
        /**
          * Should search products
         */
        "searchProducts"?: boolean;
        /**
          * Should search suggestions
         */
        "searchSuggestions"?: boolean;
        /**
          * Button text
         */
        "searchText": string;
        /**
          * Sends analytics when making query
         */
        "sendAnalytics"?: boolean;
        /**
          * Variant of the search field
         */
        "variant": SearchFieldVariant1;
    }
    /**
     * Full app component for search landing page
     */
    interface KlevuSearchLandingPage {
        /**
          * How many products to display in filters
         */
        "filterCount"?: number;
        /**
          * Order filters in a customer order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * How many results to display on a page
         */
        "limit": number;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * In which order to set the products
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What term was used for search
         */
        "term": string;
        /**
          * Use pagination instead of loading more
         */
        "usePagination"?: boolean;
    }
    /**
     * Simplified application that shows search box where typing text displays suggestions.
     */
    interface KlevuSimpleSearch {
    }
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface KlevuSlider {
        /**
          * Current end value of the range
         */
        "end"?: number;
        /**
          * Format tooltip value with function
         */
        "formatTooltip"?: (value: number) => string;
        /**
          * Max value of the range
         */
        "max": number;
        /**
          * Min value of the range
         */
        "min": number;
        /**
          * Show tooltips on top of slider
         */
        "showTooltips"?: boolean;
        /**
          * Current start value of the range
         */
        "start"?: number;
    }
    /**
     * Horizontal slides component
     */
    interface KlevuSlides {
        /**
          * Height of the slider
         */
        "height": number;
        /**
          * Hides next and previous buttons
         */
        "hideNextPrev"?: boolean;
        /**
          * When clicking next/prev buttons should scroll full width of container
         */
        "slideFullWidth"?: boolean;
    }
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface KlevuSort {
        /**
          * Dropdown variant
         */
        "variant": KlevuDropdownVariant1;
    }
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface KlevuSuggestionsList {
        /**
          * Caption on the list
         */
        "caption": string;
        /**
          * Suggestions to render in list
         */
        "suggestions": string[];
    }
    /**
     * Branded text field component
     */
    interface KlevuTextfield {
        /**
          * Display a button to clear field value on the right side of the field
         */
        "clearButton"?: boolean;
        /**
          * Is field disabled
         */
        "disabled": boolean;
        /**
          * Is field in error state
         */
        "error"?: boolean;
        /**
          * Icon to display in textfield start of the field. Please use tokens of material icons
         */
        "icon"?: string;
        /**
          * Placeholder value of the field
         */
        "placeholder"?: string;
        /**
          * Current value of the field
         */
        "value": string;
        /**
          * Variant of textfield
         */
        "variant": KlevuTextfieldVariant;
    }
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface KlevuTypography {
        /**
          * Variant of heading
         */
        "variant": KlevuTypographyVariant;
    }
    interface KlevuUtilViewport {
        "getCurrentSize": () => Promise<ViewportSize | undefined>;
        /**
          * List of sizes to listen for
         */
        "sizes": ViewportSize[];
    }
}
export interface KlevuCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuCheckboxElement;
}
export interface KlevuCmsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuCmsListElement;
}
export interface KlevuDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuDropdownElement;
}
export interface KlevuFacetListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuFacetListElement;
}
export interface KlevuPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuPaginationElement;
}
export interface KlevuProductCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuProductElement;
}
export interface KlevuQueryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuQueryElement;
}
export interface KlevuSearchFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSearchFieldElement;
}
export interface KlevuSimpleSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSimpleSearchElement;
}
export interface KlevuSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSliderElement;
}
export interface KlevuSortCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSortElement;
}
export interface KlevuTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuTextfieldElement;
}
export interface KlevuUtilViewportCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuUtilViewportElement;
}
declare global {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface HTMLKlevuAccordionElement extends Components.KlevuAccordion, HTMLStencilElement {
    }
    var HTMLKlevuAccordionElement: {
        prototype: HTMLKlevuAccordionElement;
        new (): HTMLKlevuAccordionElement;
    };
    /**
     * Basic badge component. Can be used to display small information on top of other elements.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface HTMLKlevuBadgeElement extends Components.KlevuBadge, HTMLStencilElement {
    }
    var HTMLKlevuBadgeElement: {
        prototype: HTMLKlevuBadgeElement;
        new (): HTMLKlevuBadgeElement;
    };
    /**
     * Basic button component
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     */
    interface HTMLKlevuButtonElement extends Components.KlevuButton, HTMLStencilElement {
    }
    var HTMLKlevuButtonElement: {
        prototype: HTMLKlevuButtonElement;
        new (): HTMLKlevuButtonElement;
    };
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface HTMLKlevuCheckboxElement extends Components.KlevuCheckbox, HTMLStencilElement {
    }
    var HTMLKlevuCheckboxElement: {
        prototype: HTMLKlevuCheckboxElement;
        new (): HTMLKlevuCheckboxElement;
    };
    /**
     * Component to display list of CMS page results
     */
    interface HTMLKlevuCmsListElement extends Components.KlevuCmsList, HTMLStencilElement {
    }
    var HTMLKlevuCmsListElement: {
        prototype: HTMLKlevuCmsListElement;
        new (): HTMLKlevuCmsListElement;
    };
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     */
    interface HTMLKlevuDrawerElement extends Components.KlevuDrawer, HTMLStencilElement {
    }
    var HTMLKlevuDrawerElement: {
        prototype: HTMLKlevuDrawerElement;
        new (): HTMLKlevuDrawerElement;
    };
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface HTMLKlevuDropdownElement extends Components.KlevuDropdown, HTMLStencilElement {
    }
    var HTMLKlevuDropdownElement: {
        prototype: HTMLKlevuDropdownElement;
        new (): HTMLKlevuDropdownElement;
    };
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart heading - Heading of the facet
     */
    interface HTMLKlevuFacetElement extends Components.KlevuFacet, HTMLStencilElement {
    }
    var HTMLKlevuFacetElement: {
        prototype: HTMLKlevuFacetElement;
        new (): HTMLKlevuFacetElement;
    };
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface HTMLKlevuFacetListElement extends Components.KlevuFacetList, HTMLStencilElement {
    }
    var HTMLKlevuFacetListElement: {
        prototype: HTMLKlevuFacetListElement;
        new (): HTMLKlevuFacetListElement;
    };
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface HTMLKlevuInitElement extends Components.KlevuInit, HTMLStencilElement {
    }
    var HTMLKlevuInitElement: {
        prototype: HTMLKlevuInitElement;
        new (): HTMLKlevuInitElement;
    };
    /**
     * Lists latest searches user has made on the site
     */
    interface HTMLKlevuLatestSearchesElement extends Components.KlevuLatestSearches, HTMLStencilElement {
    }
    var HTMLKlevuLatestSearchesElement: {
        prototype: HTMLKlevuLatestSearchesElement;
        new (): HTMLKlevuLatestSearchesElement;
    };
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface HTMLKlevuLayoutResultsElement extends Components.KlevuLayoutResults, HTMLStencilElement {
    }
    var HTMLKlevuLayoutResultsElement: {
        prototype: HTMLKlevuLayoutResultsElement;
        new (): HTMLKlevuLayoutResultsElement;
    };
    /**
     * Single list item for listing things.
     */
    interface HTMLKlevuListElement extends Components.KlevuList, HTMLStencilElement {
    }
    var HTMLKlevuListElement: {
        prototype: HTMLKlevuListElement;
        new (): HTMLKlevuListElement;
    };
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface HTMLKlevuMerchandisingElement extends Components.KlevuMerchandising, HTMLStencilElement {
    }
    var HTMLKlevuMerchandisingElement: {
        prototype: HTMLKlevuMerchandisingElement;
        new (): HTMLKlevuMerchandisingElement;
    };
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface HTMLKlevuPaginationElement extends Components.KlevuPagination, HTMLStencilElement {
    }
    var HTMLKlevuPaginationElement: {
        prototype: HTMLKlevuPaginationElement;
        new (): HTMLKlevuPaginationElement;
    };
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface HTMLKlevuPopularSearchesElement extends Components.KlevuPopularSearches, HTMLStencilElement {
    }
    var HTMLKlevuPopularSearchesElement: {
        prototype: HTMLKlevuPopularSearchesElement;
        new (): HTMLKlevuPopularSearchesElement;
    };
    /**
     * Popup component where clicking origin component popups the the content
     */
    interface HTMLKlevuPopupElement extends Components.KlevuPopup, HTMLStencilElement {
    }
    var HTMLKlevuPopupElement: {
        prototype: HTMLKlevuPopupElement;
        new (): HTMLKlevuPopupElement;
    };
    /**
     * Generic product component that renders product based on KlevuRecord of @klevu/core
     * All parts of the component can be replaced with slots.
     * @csspart image - The image element of component
     * @csspart container - The container element of whole
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     */
    interface HTMLKlevuProductElement extends Components.KlevuProduct, HTMLStencilElement {
    }
    var HTMLKlevuProductElement: {
        prototype: HTMLKlevuProductElement;
        new (): HTMLKlevuProductElement;
    };
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-large spacing between grid items;
     */
    interface HTMLKlevuProductGridElement extends Components.KlevuProductGrid, HTMLStencilElement {
    }
    var HTMLKlevuProductGridElement: {
        prototype: HTMLKlevuProductGridElement;
        new (): HTMLKlevuProductGridElement;
    };
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface HTMLKlevuQueryElement extends Components.KlevuQuery, HTMLStencilElement {
    }
    var HTMLKlevuQueryElement: {
        prototype: HTMLKlevuQueryElement;
        new (): HTMLKlevuQueryElement;
    };
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface HTMLKlevuQuicksearchElement extends Components.KlevuQuicksearch, HTMLStencilElement {
    }
    var HTMLKlevuQuicksearchElement: {
        prototype: HTMLKlevuQuicksearchElement;
        new (): HTMLKlevuQuicksearchElement;
    };
    /**
     * Full recommendation banner solution
     */
    interface HTMLKlevuRecommendationsElement extends Components.KlevuRecommendations, HTMLStencilElement {
    }
    var HTMLKlevuRecommendationsElement: {
        prototype: HTMLKlevuRecommendationsElement;
        new (): HTMLKlevuRecommendationsElement;
    };
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface HTMLKlevuSearchFieldElement extends Components.KlevuSearchField, HTMLStencilElement {
    }
    var HTMLKlevuSearchFieldElement: {
        prototype: HTMLKlevuSearchFieldElement;
        new (): HTMLKlevuSearchFieldElement;
    };
    /**
     * Full app component for search landing page
     */
    interface HTMLKlevuSearchLandingPageElement extends Components.KlevuSearchLandingPage, HTMLStencilElement {
    }
    var HTMLKlevuSearchLandingPageElement: {
        prototype: HTMLKlevuSearchLandingPageElement;
        new (): HTMLKlevuSearchLandingPageElement;
    };
    /**
     * Simplified application that shows search box where typing text displays suggestions.
     */
    interface HTMLKlevuSimpleSearchElement extends Components.KlevuSimpleSearch, HTMLStencilElement {
    }
    var HTMLKlevuSimpleSearchElement: {
        prototype: HTMLKlevuSimpleSearchElement;
        new (): HTMLKlevuSimpleSearchElement;
    };
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface HTMLKlevuSliderElement extends Components.KlevuSlider, HTMLStencilElement {
    }
    var HTMLKlevuSliderElement: {
        prototype: HTMLKlevuSliderElement;
        new (): HTMLKlevuSliderElement;
    };
    /**
     * Horizontal slides component
     */
    interface HTMLKlevuSlidesElement extends Components.KlevuSlides, HTMLStencilElement {
    }
    var HTMLKlevuSlidesElement: {
        prototype: HTMLKlevuSlidesElement;
        new (): HTMLKlevuSlidesElement;
    };
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface HTMLKlevuSortElement extends Components.KlevuSort, HTMLStencilElement {
    }
    var HTMLKlevuSortElement: {
        prototype: HTMLKlevuSortElement;
        new (): HTMLKlevuSortElement;
    };
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface HTMLKlevuSuggestionsListElement extends Components.KlevuSuggestionsList, HTMLStencilElement {
    }
    var HTMLKlevuSuggestionsListElement: {
        prototype: HTMLKlevuSuggestionsListElement;
        new (): HTMLKlevuSuggestionsListElement;
    };
    /**
     * Branded text field component
     */
    interface HTMLKlevuTextfieldElement extends Components.KlevuTextfield, HTMLStencilElement {
    }
    var HTMLKlevuTextfieldElement: {
        prototype: HTMLKlevuTextfieldElement;
        new (): HTMLKlevuTextfieldElement;
    };
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface HTMLKlevuTypographyElement extends Components.KlevuTypography, HTMLStencilElement {
    }
    var HTMLKlevuTypographyElement: {
        prototype: HTMLKlevuTypographyElement;
        new (): HTMLKlevuTypographyElement;
    };
    interface HTMLKlevuUtilViewportElement extends Components.KlevuUtilViewport, HTMLStencilElement {
    }
    var HTMLKlevuUtilViewportElement: {
        prototype: HTMLKlevuUtilViewportElement;
        new (): HTMLKlevuUtilViewportElement;
    };
    interface HTMLElementTagNameMap {
        "klevu-accordion": HTMLKlevuAccordionElement;
        "klevu-badge": HTMLKlevuBadgeElement;
        "klevu-button": HTMLKlevuButtonElement;
        "klevu-checkbox": HTMLKlevuCheckboxElement;
        "klevu-cms-list": HTMLKlevuCmsListElement;
        "klevu-drawer": HTMLKlevuDrawerElement;
        "klevu-dropdown": HTMLKlevuDropdownElement;
        "klevu-facet": HTMLKlevuFacetElement;
        "klevu-facet-list": HTMLKlevuFacetListElement;
        "klevu-init": HTMLKlevuInitElement;
        "klevu-latest-searches": HTMLKlevuLatestSearchesElement;
        "klevu-layout-results": HTMLKlevuLayoutResultsElement;
        "klevu-list": HTMLKlevuListElement;
        "klevu-merchandising": HTMLKlevuMerchandisingElement;
        "klevu-pagination": HTMLKlevuPaginationElement;
        "klevu-popular-searches": HTMLKlevuPopularSearchesElement;
        "klevu-popup": HTMLKlevuPopupElement;
        "klevu-product": HTMLKlevuProductElement;
        "klevu-product-grid": HTMLKlevuProductGridElement;
        "klevu-query": HTMLKlevuQueryElement;
        "klevu-quicksearch": HTMLKlevuQuicksearchElement;
        "klevu-recommendations": HTMLKlevuRecommendationsElement;
        "klevu-search-field": HTMLKlevuSearchFieldElement;
        "klevu-search-landing-page": HTMLKlevuSearchLandingPageElement;
        "klevu-simple-search": HTMLKlevuSimpleSearchElement;
        "klevu-slider": HTMLKlevuSliderElement;
        "klevu-slides": HTMLKlevuSlidesElement;
        "klevu-sort": HTMLKlevuSortElement;
        "klevu-suggestions-list": HTMLKlevuSuggestionsListElement;
        "klevu-textfield": HTMLKlevuTextfieldElement;
        "klevu-typography": HTMLKlevuTypographyElement;
        "klevu-util-viewport": HTMLKlevuUtilViewportElement;
    }
}
declare namespace LocalJSX {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface KlevuAccordion {
        /**
          * is accordion open
         */
        "open"?: boolean;
        /**
          * Should it initially be open
         */
        "startOpen"?: boolean;
    }
    /**
     * Basic badge component. Can be used to display small information on top of other elements.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface KlevuBadge {
        /**
          * Setting a acceent color to badge
         */
        "accent"?: number;
        /**
          * Setting a neutral color to badge
         */
        "neutral"?: number;
    }
    /**
     * Basic button component
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     */
    interface KlevuButton {
        /**
          * Is button disabled
         */
        "disabled"?: boolean;
        /**
          * Make button display block
         */
        "fullWidth"?: boolean;
        /**
          * Toned down secondary button
         */
        "isSecondary"?: boolean;
    }
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface KlevuCheckbox {
        /**
          * Is checkbox checked
         */
        "checked"?: boolean;
        /**
          * Is disabled
         */
        "disabled"?: boolean;
        /**
          * Name of the checkbox
         */
        "name"?: string;
        "onKlevuCheckboxChange"?: (event: KlevuCheckboxCustomEvent<boolean>) => void;
    }
    /**
     * Component to display list of CMS page results
     */
    interface KlevuCmsList {
        /**
          * Caption of the listing
         */
        "caption"?: string;
        /**
          * Should use url parameter from link to create anchor
         */
        "link"?: boolean;
        "onKlevuCmsPageClick"?: (event: KlevuCmsListCustomEvent<Partial<KlevuRecord>>) => void;
        /**
          * List of Klevu results records with type of Page
         */
        "pages": Array<Partial<KlevuRecord>>;
    }
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     */
    interface KlevuDrawer {
        /**
          * Anchor to right or left side of the page
         */
        "anchor"?: "right" | "left";
        /**
          * Display dim background on top of other content
         */
        "background"?: boolean;
        /**
          * Close by clicking outside of drawer
         */
        "closeAtOutsideClick"?: boolean;
        /**
          * Add little bit of padding to content of drawer
         */
        "insertYPadding"?: boolean;
        /**
          * Start side drawer open
         */
        "startOpen"?: boolean;
    }
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface KlevuDropdown {
        /**
          * Is element disabled
         */
        "disabled"?: boolean;
        /**
          * Form name
         */
        "name": string;
        /**
          * When dropdown item has been changed
         */
        "onKlevuDropdownChanged"?: (event: KlevuDropdownCustomEvent<string>) => void;
        /**
          * Options to display in dropdown
         */
        "options": Array<{ value: string; text: String }>;
        /**
          * Which element value is selected
         */
        "selected": string;
        /**
          * Variant of dropdown
         */
        "variant"?: KlevuDropdownVariant;
    }
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart heading - Heading of the facet
     */
    interface KlevuFacet {
        /**
          * Should the facet be in accordion
         */
        "accordion"?: boolean;
        /**
          * Start accordion open
         */
        "accordionStartOpen"?: boolean;
        /**
          * Set predefined order for options. Unfound values are in original order in end
         */
        "customOrder"?: string[];
        /**
          * Originating filter manager which to modify. This is the most important property of the component. It will be used to modify the filter state for queries.
         */
        "manager": FilterManager;
        /**
          * Which mode should facets be in
         */
        "mode"?: KlevuFacetMode;
        /**
          * From which options to build facet. Single option value from Klevu SDK FilterManager. Either this or slider must be set.
         */
        "option"?: KlevuFilterResultOptions;
        /**
          * From which slider to build facet.
         */
        "slider"?: KlevuFilterResultSlider;
    }
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface KlevuFacetList {
        /**
          * Should use accordions to for facets
         */
        "accordion"?: boolean;
        /**
          * Button text for Apply button when using `useApplyButton`
         */
        "applyButtonText"?: string;
        /**
          * Button text for Clear button when using `useApplyButton`
         */
        "clearButtonText"?: string;
        /**
          * Custom order keys for every facet
         */
        "customOrder"?: { [key: string]: string[] };
        /**
          * Filter managet from which the list is built from
         */
        "manager": FilterManager;
        /**
          * Set mode for facets or if object is passed then define per key
         */
        "mode"?: KlevuFacetMode1 | { [key: string]: KlevuFacetMode1 };
        /**
          * When filters are applied
         */
        "onKlevuApplyFilters"?: (event: KlevuFacetListCustomEvent<void>) => void;
        /**
          * Display "apply filters" button in the end. And do not apply filters until this button is pressed
         */
        "useApplyButton"?: boolean;
    }
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface KlevuInit {
        /**
          * Read only API key to Klevu
         */
        "apiKey": string;
        /**
          * Global settings
         */
        "settings"?: KlevuUIGlobalSettings;
        /**
          * Klevu Server URL
         */
        "url": string;
    }
    /**
     * Lists latest searches user has made on the site
     */
    interface KlevuLatestSearches {
        /**
          * Caption of the list
         */
        "caption"?: string;
    }
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface KlevuLayoutResults {
    }
    /**
     * Single list item for listing things.
     */
    interface KlevuList {
        /**
          * Condensed version of the list item.
         */
        "condensed"?: boolean;
        /**
          * Icon to be displayed in the list item. Cannot be used with image.
         */
        "icon"?: string;
        /**
          * Image to be displayed in the list item. Cannot be used with icon.
         */
        "image"?: string;
        "noXPadding"?: boolean;
        /**
          * Make the whole thing clickable and navigate to this url.
         */
        "url"?: string;
    }
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface KlevuMerchandising {
        /**
          * Which category products
         */
        "category": string;
        /**
          * Category title
         */
        "categoryTitle": string;
        /**
          * How many filters per facet to show
         */
        "filterCount"?: number;
        /**
          * Order filters in given order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Count of products for page
         */
        "limit"?: number;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * Order of results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Should display pagination instead of load next
         */
        "usePagination"?: boolean;
    }
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface KlevuPagination {
        /**
          * Current page
         */
        "current"?: number;
        /**
          * Max page
         */
        "max"?: number;
        /**
          * Min page
         */
        "min"?: number;
        /**
          * Page that was changed into
         */
        "onKlevuPaginationChange"?: (event: KlevuPaginationCustomEvent<number>) => void;
        /**
          * Query results used to build min, max and current
         */
        "queryResult"?: KlevuQueryResult;
    }
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface KlevuPopularSearches {
        /**
          * Caption of the list
         */
        "caption"?: string;
    }
    /**
     * Popup component where clicking origin component popups the the content
     */
    interface KlevuPopup {
        /**
          * Anchor popup to left or right of page
         */
        "anchor"?: Placement;
        /**
          * Close popup when clicking outside content area
         */
        "closeAtOutsideClick"?: boolean;
        /**
          * At minimum popup content should be the widht of the origin
         */
        "fullwidthContent"?: boolean;
        /**
          * Open content when origin component is focused
         */
        "openAtFocus"?: boolean;
        /**
          * Initially show the popup
         */
        "startOpen"?: boolean;
    }
    /**
     * Generic product component that renders product based on KlevuRecord of @klevu/core
     * All parts of the component can be replaced with slots.
     * @csspart image - The image element of component
     * @csspart container - The container element of whole
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     */
    interface KlevuProduct {
        /**
          * Force certain width for product. Do not use max-width
         */
        "fixedWidth"?: boolean;
        /**
          * Hides brand information
         */
        "hideBrand"?: boolean;
        /**
          * Hides description from info
         */
        "hideDescription"?: boolean;
        /**
          * Hides image
         */
        "hideImage"?: boolean;
        /**
          * Hides name from info
         */
        "hideName"?: boolean;
        /**
          * Hides price from info
         */
        "hidePrice"?: boolean;
        /**
          * Do not show swatches in products
         */
        "hideSwatches"?: boolean;
        /**
          * When products has been clicked
         */
        "onKlevuProductClick"?: (event: KlevuProductCustomEvent<KlevuProductOnProductClick>) => void;
        /**
          * Product data
         */
        "product"?: Partial<KlevuRecord>;
        /**
          * What variant of product to render
         */
        "variant"?: KlevuProductVariant;
    }
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-large spacing between grid items;
     */
    interface KlevuProductGrid {
        /**
          * Place products in grid with this many products
         */
        "itemsPerRow"?: number;
    }
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface KlevuQuery {
        /**
          * Which category to do merchandising. Required for "merchandising" type
         */
        "category"?: string;
        /**
          * Which category title to have on page. Required for "merchandising" type
         */
        "categoryTitle"?: string;
        /**
          * To how many filters limit results to
         */
        "filterCount"?: number;
        /**
          * What's the limit on page
         */
        "limit"?: number;
        /**
          * @klevu /core FilterManager used for filters. If none is set, new one is created
         */
        "manager"?: FilterManager;
        /**
          * Offset of results
         */
        "offset"?: number;
        "onKlevuQueryResult"?: (event: KlevuQueryCustomEvent<{
    result: KlevuQueryResult
    manager: FilterManager
  }>) => void;
        /**
          * Object to override and settings on search options
         */
        "options"?: AllQueryOptions;
        /**
          * Which recommendation to fetch from Klevu Merchant Center. Required for "recommendation" type
         */
        "recommendationId"?: string;
        /**
          * What to search. Required for "search" type.
         */
        "searchTerm"?: string;
        /**
          * Should search view event be sent. View event is important for analytical cases. In case of a search this should be used only when creating a landing page for search.
         */
        "sendSearchViewEvent"?: boolean;
        /**
          * How to sort
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What kind of query
         */
        "type": "search" | "merchandising" | "recommendation";
        /**
          * Should component listen to changes to filters
         */
        "updateOnFilterChange"?: boolean;
    }
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface KlevuQuicksearch {
        /**
          * What term should be used if there isn't enough results
         */
        "fallbackTerm"?: string;
        /**
          * Placeholder for input text
         */
        "placeholder"?: string;
        /**
          * Anchor popup to witch side
         */
        "popupAnchor"?: Placement;
        /**
          * Function to render custom products. Result has to be native HTML element or a string. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * Should component search for categories too
         */
        "searchCategories"?: boolean;
        /**
          * Should component search for CMS pages too
         */
        "searchCmsPages"?: boolean;
        /**
          * Change variant of the search field
         */
        "searchFieldVariant"?: SearchFieldVariant;
        /**
          * Text of search button
         */
        "searchText"?: string;
    }
    /**
     * Full recommendation banner solution
     */
    interface KlevuRecommendations {
        /**
          * For cart recommendation you need to provide product id's in cart
         */
        "cartProductIds"?: string[];
        /**
          * For category product recommendation you need to provide categery path
         */
        "categoryPath"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "currentProductId"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "itemGroupId"?: string;
        /**
          * The ID of the recommendation
         */
        "recommendationId": string;
        /**
          * Title of the recommendation
         */
        "recommendationTitle": string;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
    }
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface KlevuSearchField {
        /**
          * Fallback term to use if there are no results
         */
        "fallbackTerm"?: string;
        /**
          * Maximum amount of results
         */
        "limit"?: number;
        /**
          * When user clicks search button. Returns the search term.
         */
        "onKlevuSearchClick"?: (event: KlevuSearchFieldCustomEvent<string>) => void;
        /**
          * When results come from after typing in the search field. This is debounced to avoid excessive requests.
         */
        "onKlevuSearchResults"?: (event: KlevuSearchFieldCustomEvent<SearchResultsEventData>) => void;
        /**
          * When searchfield gives some suggestions
         */
        "onKlevuSearchSuggestions"?: (event: KlevuSearchFieldCustomEvent<SuggestionsEventData>) => void;
        /**
          * The placeholder text to display in the search field.
         */
        "placeholder"?: string;
        /**
          * Should try to find categories as well
         */
        "searchCategories"?: boolean;
        /**
          * Should try to find cms pages as well
         */
        "searchCmsPages"?: boolean;
        /**
          * Should search products
         */
        "searchProducts"?: boolean;
        /**
          * Should search suggestions
         */
        "searchSuggestions"?: boolean;
        /**
          * Button text
         */
        "searchText"?: string;
        /**
          * Sends analytics when making query
         */
        "sendAnalytics"?: boolean;
        /**
          * Variant of the search field
         */
        "variant"?: SearchFieldVariant1;
    }
    /**
     * Full app component for search landing page
     */
    interface KlevuSearchLandingPage {
        /**
          * How many products to display in filters
         */
        "filterCount"?: number;
        /**
          * Order filters in a customer order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * How many results to display on a page
         */
        "limit"?: number;
        /**
          * Rendering function created to put custom content to klevu-product slots. Provides a product being rendered. This function is called for each slot (top, image, info and bottom) of the component. Second parameter provides slot requested. Return null for slots that you do not want to render.
         */
        "renderProductSlot"?: (product: KlevuRecord, productSlot: KlevuProductSlots) => HTMLElement | string | null;
        /**
          * In which order to set the products
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What term was used for search
         */
        "term": string;
        /**
          * Use pagination instead of loading more
         */
        "usePagination"?: boolean;
    }
    /**
     * Simplified application that shows search box where typing text displays suggestions.
     */
    interface KlevuSimpleSearch {
        /**
          * When any of suggestions has been clicked
         */
        "onKlevuSuggestionClick"?: (event: KlevuSimpleSearchCustomEvent<string>) => void;
    }
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface KlevuSlider {
        /**
          * Current end value of the range
         */
        "end"?: number;
        /**
          * Format tooltip value with function
         */
        "formatTooltip"?: (value: number) => string;
        /**
          * Max value of the range
         */
        "max": number;
        /**
          * Min value of the range
         */
        "min": number;
        /**
          * When values change
         */
        "onKlevuSliderChange"?: (event: KlevuSliderCustomEvent<[number, number]>) => void;
        /**
          * Show tooltips on top of slider
         */
        "showTooltips"?: boolean;
        /**
          * Current start value of the range
         */
        "start"?: number;
    }
    /**
     * Horizontal slides component
     */
    interface KlevuSlides {
        /**
          * Height of the slider
         */
        "height"?: number;
        /**
          * Hides next and previous buttons
         */
        "hideNextPrev"?: boolean;
        /**
          * When clicking next/prev buttons should scroll full width of container
         */
        "slideFullWidth"?: boolean;
    }
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface KlevuSort {
        /**
          * When the sorting changes
         */
        "onKlevuSortChanged"?: (event: KlevuSortCustomEvent<KlevuSearchSorting>) => void;
        /**
          * Dropdown variant
         */
        "variant"?: KlevuDropdownVariant1;
    }
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface KlevuSuggestionsList {
        /**
          * Caption on the list
         */
        "caption"?: string;
        /**
          * Suggestions to render in list
         */
        "suggestions"?: string[];
    }
    /**
     * Branded text field component
     */
    interface KlevuTextfield {
        /**
          * Display a button to clear field value on the right side of the field
         */
        "clearButton"?: boolean;
        /**
          * Is field disabled
         */
        "disabled"?: boolean;
        /**
          * Is field in error state
         */
        "error"?: boolean;
        /**
          * Icon to display in textfield start of the field. Please use tokens of material icons
         */
        "icon"?: string;
        /**
          * When text changes in field
         */
        "onKlevuTextChanged"?: (event: KlevuTextfieldCustomEvent<string>) => void;
        /**
          * When textfield is focused
         */
        "onKlevuTextFocused"?: (event: KlevuTextfieldCustomEvent<void>) => void;
        /**
          * Placeholder value of the field
         */
        "placeholder"?: string;
        /**
          * Current value of the field
         */
        "value": string;
        /**
          * Variant of textfield
         */
        "variant"?: KlevuTextfieldVariant;
    }
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface KlevuTypography {
        /**
          * Variant of heading
         */
        "variant": KlevuTypographyVariant;
    }
    interface KlevuUtilViewport {
        "onSizeChanged"?: (event: KlevuUtilViewportCustomEvent<ViewportSize>) => void;
        /**
          * List of sizes to listen for
         */
        "sizes"?: ViewportSize[];
    }
    interface IntrinsicElements {
        "klevu-accordion": KlevuAccordion;
        "klevu-badge": KlevuBadge;
        "klevu-button": KlevuButton;
        "klevu-checkbox": KlevuCheckbox;
        "klevu-cms-list": KlevuCmsList;
        "klevu-drawer": KlevuDrawer;
        "klevu-dropdown": KlevuDropdown;
        "klevu-facet": KlevuFacet;
        "klevu-facet-list": KlevuFacetList;
        "klevu-init": KlevuInit;
        "klevu-latest-searches": KlevuLatestSearches;
        "klevu-layout-results": KlevuLayoutResults;
        "klevu-list": KlevuList;
        "klevu-merchandising": KlevuMerchandising;
        "klevu-pagination": KlevuPagination;
        "klevu-popular-searches": KlevuPopularSearches;
        "klevu-popup": KlevuPopup;
        "klevu-product": KlevuProduct;
        "klevu-product-grid": KlevuProductGrid;
        "klevu-query": KlevuQuery;
        "klevu-quicksearch": KlevuQuicksearch;
        "klevu-recommendations": KlevuRecommendations;
        "klevu-search-field": KlevuSearchField;
        "klevu-search-landing-page": KlevuSearchLandingPage;
        "klevu-simple-search": KlevuSimpleSearch;
        "klevu-slider": KlevuSlider;
        "klevu-slides": KlevuSlides;
        "klevu-sort": KlevuSort;
        "klevu-suggestions-list": KlevuSuggestionsList;
        "klevu-textfield": KlevuTextfield;
        "klevu-typography": KlevuTypography;
        "klevu-util-viewport": KlevuUtilViewport;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Component that wrap two slots to create accordion element.
             * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
             * @cssprop --klevu-accordion-background transparent Header background
             * @cssprop --klevu-accordion-content-height 600px Maxium height for content
             */
            "klevu-accordion": LocalJSX.KlevuAccordion & JSXBase.HTMLAttributes<HTMLKlevuAccordionElement>;
            /**
             * Basic badge component. Can be used to display small information on top of other elements.
             * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
             * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
             */
            "klevu-badge": LocalJSX.KlevuBadge & JSXBase.HTMLAttributes<HTMLKlevuBadgeElement>;
            /**
             * Basic button component
             * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
             * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
             * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
             * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
             */
            "klevu-button": LocalJSX.KlevuButton & JSXBase.HTMLAttributes<HTMLKlevuButtonElement>;
            /**
             * Checkbox component
             * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
             * @cssprop --klevu-checkbox-size 20px Size of the checkbox
             */
            "klevu-checkbox": LocalJSX.KlevuCheckbox & JSXBase.HTMLAttributes<HTMLKlevuCheckboxElement>;
            /**
             * Component to display list of CMS page results
             */
            "klevu-cms-list": LocalJSX.KlevuCmsList & JSXBase.HTMLAttributes<HTMLKlevuCmsListElement>;
            /**
             * Component to create offscreen drawer on left or right side of the screen
             * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
             * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
             */
            "klevu-drawer": LocalJSX.KlevuDrawer & JSXBase.HTMLAttributes<HTMLKlevuDrawerElement>;
            /**
             * Simple native dropdown component for dropdown
             * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
             * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
             */
            "klevu-dropdown": LocalJSX.KlevuDropdown & JSXBase.HTMLAttributes<HTMLKlevuDropdownElement>;
            /**
             * Rendering items of single facet with all its options or a slider.
             * Manager property must be set for this component to work.
             * @csspart heading - Heading of the facet
             */
            "klevu-facet": LocalJSX.KlevuFacet & JSXBase.HTMLAttributes<HTMLKlevuFacetElement>;
            /**
             * Render all facets of filter manager
             * @cssprop --klevu-face-list-width 200px Width of the facet listing
             */
            "klevu-facet-list": LocalJSX.KlevuFacetList & JSXBase.HTMLAttributes<HTMLKlevuFacetListElement>;
            /**
             * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
             * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
             * configuration for all components on the page and provide few global settings for all components:
             * - **onItemClick:** what happens when product is clicked. Typically this places default action of
             *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
             *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
             *   link following.
             * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
             *   is not used this can be used for it. Has product as attribute.
             * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
             *   rendering then this is the place. Has two attribute amount and currency of item.
             * Initializes components to fetch data from correct Klevu backend
             * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
             * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
             * @cssprop --klevu-color-primary #2b4af7 The primary color
             * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
             * @cssprop --klevu-color-neutral-1 #ffffff Background color
             * @cssprop --klevu-color-neutral-2 #f6f6f6
             * @cssprop --klevu-color-neutral-3 #ededed
             * @cssprop --klevu-color-neutral-4 #e3e3e3
             * @cssprop --klevu-color-neutral-5 #d6d6d6
             * @cssprop --klevu-color-neutral-6 #919191
             * @cssprop --klevu-color-neutral-7 #757575
             * @cssprop --klevu-color-neutral-8 #191919 Text color
             * @cssprop --klevu-spacing-01 1px Spacing 01
             * @cssprop --klevu-spacing-02 4px Spacing 02
             * @cssprop --klevu-spacing-03 8px Spacing 03
             * @cssprop --klevu-spacing-04 12px Spacing 04
             * @cssprop --klevu-spacing-05 16px Spacing 05
             * @cssprop --klevu-spacing-06 24px Spacing 06
             * @cssprop --klevu-spacing-07 32px Spacing 07
             * @cssprop --klevu-spacing-08 40px Spacing 08
             * @cssprop --klevu-spacing-09 48px Spacing 09
             * @cssprop --klevu-spacing-10 64px Spacing 10
             */
            "klevu-init": LocalJSX.KlevuInit & JSXBase.HTMLAttributes<HTMLKlevuInitElement>;
            /**
             * Lists latest searches user has made on the site
             */
            "klevu-latest-searches": LocalJSX.KlevuLatestSearches & JSXBase.HTMLAttributes<HTMLKlevuLatestSearchesElement>;
            /**
             * Generic layout used in merchansiding and search landing page
             */
            "klevu-layout-results": LocalJSX.KlevuLayoutResults & JSXBase.HTMLAttributes<HTMLKlevuLayoutResultsElement>;
            /**
             * Single list item for listing things.
             */
            "klevu-list": LocalJSX.KlevuList & JSXBase.HTMLAttributes<HTMLKlevuListElement>;
            /**
             * Full merchandising app to power up your product grid pages
             */
            "klevu-merchandising": LocalJSX.KlevuMerchandising & JSXBase.HTMLAttributes<HTMLKlevuMerchandisingElement>;
            /**
             * Pagination component. Either provide numbers or query result to display the component.
             * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
             * @cssprop --klevu-pagination-text-color - text color of item
             * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
             * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
             */
            "klevu-pagination": LocalJSX.KlevuPagination & JSXBase.HTMLAttributes<HTMLKlevuPaginationElement>;
            /**
             * Fetches and displays most popular searches from Klevu Merchant center
             */
            "klevu-popular-searches": LocalJSX.KlevuPopularSearches & JSXBase.HTMLAttributes<HTMLKlevuPopularSearchesElement>;
            /**
             * Popup component where clicking origin component popups the the content
             */
            "klevu-popup": LocalJSX.KlevuPopup & JSXBase.HTMLAttributes<HTMLKlevuPopupElement>;
            /**
             * Generic product component that renders product based on KlevuRecord of @klevu/core
             * All parts of the component can be replaced with slots.
             * @csspart image - The image element of component
             * @csspart container - The container element of whole
             * @cssprop --klevu-product-width - Width of the product
             * @cssprop --klevu-product-small-width - Width of the product when small variant is used
             * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
             * @cssprop --klevu-product-image-fill - How to fill image to it's space.
             */
            "klevu-product": LocalJSX.KlevuProduct & JSXBase.HTMLAttributes<HTMLKlevuProductElement>;
            /**
             * Component to place products on grid. Very simple container for products.
             * @cssprop --klevu-product-grid-spacing --klevu-spacing-large spacing between grid items;
             */
            "klevu-product-grid": LocalJSX.KlevuProductGrid & JSXBase.HTMLAttributes<HTMLKlevuProductGridElement>;
            /**
             * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
             * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
             * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
             * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
             * cards. Whole content of __klevu-product__ can be replaced with your content.
             */
            "klevu-query": LocalJSX.KlevuQuery & JSXBase.HTMLAttributes<HTMLKlevuQueryElement>;
            /**
             * Full app to create search bar that popups trending products and search results.
             */
            "klevu-quicksearch": LocalJSX.KlevuQuicksearch & JSXBase.HTMLAttributes<HTMLKlevuQuicksearchElement>;
            /**
             * Full recommendation banner solution
             */
            "klevu-recommendations": LocalJSX.KlevuRecommendations & JSXBase.HTMLAttributes<HTMLKlevuRecommendationsElement>;
            /**
             * Plain textfield that does the searching. It queries Klevu and returns the results
             * in a custom event. Then you can decide what to do with the results.
             */
            "klevu-search-field": LocalJSX.KlevuSearchField & JSXBase.HTMLAttributes<HTMLKlevuSearchFieldElement>;
            /**
             * Full app component for search landing page
             */
            "klevu-search-landing-page": LocalJSX.KlevuSearchLandingPage & JSXBase.HTMLAttributes<HTMLKlevuSearchLandingPageElement>;
            /**
             * Simplified application that shows search box where typing text displays suggestions.
             */
            "klevu-simple-search": LocalJSX.KlevuSimpleSearch & JSXBase.HTMLAttributes<HTMLKlevuSimpleSearchElement>;
            /**
             * Horizontal slider component. By default used for price range in this package. But can
             * be used for other purposes as well.
             */
            "klevu-slider": LocalJSX.KlevuSlider & JSXBase.HTMLAttributes<HTMLKlevuSliderElement>;
            /**
             * Horizontal slides component
             */
            "klevu-slides": LocalJSX.KlevuSlides & JSXBase.HTMLAttributes<HTMLKlevuSlidesElement>;
            /**
             * Sort dropdown. User can select what kind of sorting they want
             */
            "klevu-sort": LocalJSX.KlevuSort & JSXBase.HTMLAttributes<HTMLKlevuSortElement>;
            /**
             * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
             */
            "klevu-suggestions-list": LocalJSX.KlevuSuggestionsList & JSXBase.HTMLAttributes<HTMLKlevuSuggestionsListElement>;
            /**
             * Branded text field component
             */
            "klevu-textfield": LocalJSX.KlevuTextfield & JSXBase.HTMLAttributes<HTMLKlevuTextfieldElement>;
            /**
             * Klevu typography component. This component is used in most places to set correct font in component pieces.
             * @cssprop --klevu-h1-size 24px H1 size
             * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
             * @cssprop --klevu-h1-weight 700 H1 weight
             * @cssprop --klevu-h2-size 20px H2 size
             * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
             * @cssprop --klevu-h2-weight 700 H2 weight
             * @cssprop --klevu-h3-size 16px H3 size
             * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
             * @cssprop --klevu-h3-weight 700 H3 weight
             * @cssprop --klevu-h4-size 14px H4 size
             * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
             * @cssprop --klevu-h4-weight 700 H4 weight
             * @cssprop --klevu-body-l-size 20px Body large size
             * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
             * @cssprop --klevu-body-m-size 16px Body medium size
             * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
             * @cssprop --klevu-body-s-size 14px  Body small size
             * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
             * @cssprop --klevu-body-xs-size 12px Body extra small size
             * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
             */
            "klevu-typography": LocalJSX.KlevuTypography & JSXBase.HTMLAttributes<HTMLKlevuTypographyElement>;
            "klevu-util-viewport": LocalJSX.KlevuUtilViewport & JSXBase.HTMLAttributes<HTMLKlevuUtilViewportElement>;
        }
    }
}
