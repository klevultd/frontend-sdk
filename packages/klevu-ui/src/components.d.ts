/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FilterManager, FilterManagerFilters, KlevuConfig, KlevuFetchModifer, KlevuFilterResultOptions, KlevuFilterResultSlider, KlevuMerchandisingOptions, KlevuQueryResult, KlevuRecord, KlevuResponseQueryObject, KlevuSearchSorting, KlevuSuggestionResult, KMCMapsRootObject, MoiMessages, MoiProduct, MoiRequest, MoiResponseFilter, MoiSavedFeedback } from "@klevu/core";
import { KlevuMessageFeedbackReasonDetails } from "./components/klevu-chat-bubble/klevu-chat-bubble";
import { onKlevuMessageFeedbackDetails } from "./components/klevu-chat-messages/klevu-chat-messages";
import { KlevuOnSwatchClick } from "./components/klevu-color-swatch/klevu-color-swatch";
import { KlevuDropdownVariant } from "./components/klevu-dropdown/klevu-dropdown";
import { KlevuFacetMode, KlevuSelectionUpdatedEventDetail } from "./components/klevu-facet/klevu-facet";
import { KlevuColorSwatchOverride } from "./components/klevu-facet-list/klevu-facet-list";
import { KlevuFacetMode as KlevuFacetMode1 } from "./components/klevu-facet/klevu-facet";
import { KlevuColorSwatchOverride as KlevuColorSwatchOverride1, KlevuFiltersAppliedEventDetail } from "./components/klevu-facet-list/klevu-facet-list";
import { KlevuImageSelectedEvent } from "./components/klevu-image-picker/klevu-image-picker";
import { KlevuUIGlobalSettings } from "./utils/utils";
import { Translation, Translations } from "./components/klevu-init/klevu-init";
import { Placement } from "@floating-ui/dom";
import { KlevuProductOnProductClick, KlevuProductVariant } from "./components/klevu-product/klevu-product";
import { KlevuTextfieldVariant } from "./components/klevu-textfield/klevu-textfield";
import { AllQueryOptions } from "./components/klevu-query/klevu-query";
import { SearchFieldVariant } from "./components/klevu-search-field/klevu-search-field";
import { KlevuQuicksearchDataEvent, KlevuQuicksearchResultVarint } from "./components/klevu-quicksearch/klevu-quicksearch";
import { SearchFieldVariant as SearchFieldVariant1, SearchResultsEventData, SuggestionsEventData } from "./components/klevu-search-field/klevu-search-field";
import { KlevuDropdownVariant as KlevuDropdownVariant1 } from "./components";
import { KlevuTextfieldVariant as KlevuTextfieldVariant1 } from "./components/klevu-textfield/klevu-textfield";
import { KlevuTypographyVariant } from "./components/klevu-typography/klevu-typography";
import { OverflowBehavior, OverlayScrollbars } from "overlayscrollbars";
import { ViewportSize } from "./components/klevu-util-viewport/klevu-util-viewport";
export { FilterManager, FilterManagerFilters, KlevuConfig, KlevuFetchModifer, KlevuFilterResultOptions, KlevuFilterResultSlider, KlevuMerchandisingOptions, KlevuQueryResult, KlevuRecord, KlevuResponseQueryObject, KlevuSearchSorting, KlevuSuggestionResult, KMCMapsRootObject, MoiMessages, MoiProduct, MoiRequest, MoiResponseFilter, MoiSavedFeedback } from "@klevu/core";
export { KlevuMessageFeedbackReasonDetails } from "./components/klevu-chat-bubble/klevu-chat-bubble";
export { onKlevuMessageFeedbackDetails } from "./components/klevu-chat-messages/klevu-chat-messages";
export { KlevuOnSwatchClick } from "./components/klevu-color-swatch/klevu-color-swatch";
export { KlevuDropdownVariant } from "./components/klevu-dropdown/klevu-dropdown";
export { KlevuFacetMode, KlevuSelectionUpdatedEventDetail } from "./components/klevu-facet/klevu-facet";
export { KlevuColorSwatchOverride } from "./components/klevu-facet-list/klevu-facet-list";
export { KlevuFacetMode as KlevuFacetMode1 } from "./components/klevu-facet/klevu-facet";
export { KlevuColorSwatchOverride as KlevuColorSwatchOverride1, KlevuFiltersAppliedEventDetail } from "./components/klevu-facet-list/klevu-facet-list";
export { KlevuImageSelectedEvent } from "./components/klevu-image-picker/klevu-image-picker";
export { KlevuUIGlobalSettings } from "./utils/utils";
export { Translation, Translations } from "./components/klevu-init/klevu-init";
export { Placement } from "@floating-ui/dom";
export { KlevuProductOnProductClick, KlevuProductVariant } from "./components/klevu-product/klevu-product";
export { KlevuTextfieldVariant } from "./components/klevu-textfield/klevu-textfield";
export { AllQueryOptions } from "./components/klevu-query/klevu-query";
export { SearchFieldVariant } from "./components/klevu-search-field/klevu-search-field";
export { KlevuQuicksearchDataEvent, KlevuQuicksearchResultVarint } from "./components/klevu-quicksearch/klevu-quicksearch";
export { SearchFieldVariant as SearchFieldVariant1, SearchResultsEventData, SuggestionsEventData } from "./components/klevu-search-field/klevu-search-field";
export { KlevuDropdownVariant as KlevuDropdownVariant1 } from "./components";
export { KlevuTextfieldVariant as KlevuTextfieldVariant1 } from "./components/klevu-textfield/klevu-textfield";
export { KlevuTypographyVariant } from "./components/klevu-typography/klevu-typography";
export { OverflowBehavior, OverlayScrollbars } from "overlayscrollbars";
export { ViewportSize } from "./components/klevu-util-viewport/klevu-util-viewport";
export namespace Components {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface KlevuAccordion {
        /**
          * is accordion open
         */
        "open": boolean;
        /**
          * Should it initially be open
         */
        "startOpen"?: boolean;
    }
    /**
     * Basic badge component. Can be used to display small information on top of other elements. Typically
     * used to display things on top of product.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface KlevuBadge {
        /**
          * Setting a acceent color to badge
         */
        "accent"?: number;
        /**
          * Setting a neutral color to badge
         */
        "neutral"?: number;
    }
    /**
     * Component that displays a typical klevu banner
     */
    interface KlevuBanner {
        /**
          * The alt text to display for iamge
         */
        "altText": string;
        /**
          * The image url to display
         */
        "imageUrl": string;
        /**
          * The link url to navigate to
         */
        "linkUrl": string;
        /**
          * The target to open the link in
         */
        "target": "_blank" | "_self";
    }
    /**
     * Basic button component
     * @csspart button-base The button element
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     * @cssprop --klevu-button-text-align center Align text on button
     * @cssprop --klevu-button-padding calculated Override buttom padding with custom value
     * @cssprop --klevu-button-font-size --klevu-body-s-size Size of button text
     */
    interface KlevuButton {
        /**
          * Is button disabled
         */
        "disabled"?: boolean;
        /**
          * Make button display block
         */
        "fullWidth"?: boolean;
        /**
          * Instead of content have an icon. So basically icon-button
         */
        "icon"?: string;
        /**
          * Toned down secondary button
         */
        "isSecondary"?: boolean;
        /**
          * Toned down tertiary button
         */
        "isTertiary"?: boolean;
        "size": "tiny" | "small" | "normal" | "large";
    }
    /**
     * Container for chat items. Very simple component, just a wrapper.
     * @cssprop --klevu-chat-bubble-background --klevu-color-neutral-2 Background color of the bubble
     * @cssprop --klevu-chat-bubble-background-remote --klevu-color-primary Background color of the bubble when remote
     * @cssprop --klevu-chat-bubble-text-color inherit Text color of the bubble
     * @cssprop --klevu-chat-bubble-text-color-remote --klevu-color-neutral-1 Text color of the bubble when remote
     */
    interface KlevuChatBubble {
        /**
          * Has user given feedback to this message
         */
        "feedback"?: MoiSavedFeedback;
        /**
          * List of feedback reasons to show after the message
         */
        "feedbackReasons"?: string[];
        /**
          * Is the message from the user or from the bot
         */
        "remote"?: boolean;
        /**
          * Text for rating reason title
         */
        "tRatingReason": any;
    }
    /**
     * Component that wraps chat elements into a layout.
     * @cssprop --klevu-chat-layout-max-height 100vh The maxium height for the chat layout.
     */
    interface KlevuChatLayout {
        /**
          * Close the popup menu
         */
        "closePopup": () => Promise<void>;
        /**
          * Scroll current chat to bottom of page
         */
        "scrollMainToBottom": (behavior?: "smooth" | "instant") => Promise<void>;
        /**
          * Use native scrollbars instead of custom ones in content
         */
        "useNativeScrollbars"?: boolean;
    }
    interface KlevuChatMessages {
        /**
          * Should display a feedback button after each message
         */
        "enableMessageFeedback"?: boolean;
        /**
          * Feedbacks given by user
         */
        "feedbacks"?: MoiSavedFeedback[];
        /**
          * Messages received from Moi backend
         */
        "messages": MoiMessages;
        /**
          * What message should we
         */
        "showFeedbackFor"?: string;
    }
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface KlevuCheckbox {
        /**
          * Is checkbox checked
         */
        "checked"?: boolean;
        /**
          * Is disabled
         */
        "disabled"?: boolean;
        /**
          * Name of the checkbox
         */
        "name"?: string;
    }
    /**
     * Chip component that is used to display selected value in a listing. Gives also ability to remove the chip.
     * Has selected and removable attributes that can be used to display the chip in selected state and also to remove the chip.
     * @cssprop --klevu-chip-radius --klevu-border-radius-xxl Border radius of the chip
     * @cssprop --klevu-chip-border --klevu-color-neutral-5 Border color of the chip
     * @cssprop --klevu-chip-selected-background klevu-color-primary-with-opacity Selected background color of the chip
     * @cssprop --klevu-chip-selected-border --klevu-color-primary Selected border color of the chip
     */
    interface KlevuChip {
        /**
          * Removable state of the chip
         */
        "removable": boolean;
        /**
          * Selected state of the chip
         */
        "selected": boolean;
    }
    /**
     * Component to display list of CMS page results
     */
    interface KlevuCmsList {
        /**
          * Should use url parameter from link to create anchor
         */
        "link"?: boolean;
        /**
          * List of Klevu results records with type of Page
         */
        "pages": Array<Partial<KlevuRecord>>;
        /**
          * Caption of the listing
         */
        "tCaption": any;
    }
    /**
     * Color Swatch component
     * @cssprop --klevu-color-swatch-border #8c8c8c Border on swatch
     * @cssprop --klevu-color-swatch-default-background #000 Shown when color not found in css
     * @cssprop --klevu-color-swatch-size 25px Size of swatch
     * @cssprop --klevu-color-swatch-selected-color #2b4af7 Ring color when selected
     * @cssprop --klevu-color-swatch-border-radius 50% To change the shape of swatch
     */
    interface KlevuColorSwatch {
        /**
          * Specify border color for the swatch
         */
        "borderColor"?: string;
        /**
          * Color to apply
         */
        "color"?: string;
        /**
          * ImageUrl to load in swatch
         */
        "imageUrl"?: string;
        /**
          * This field will be sent in the click callback
         */
        "name": string;
        /**
          * If selected
         */
        "selected": boolean;
    }
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     * @cssprop --klevu-drawer-width 400px width of drawer
     */
    interface KlevuDrawer {
        /**
          * Anchor to right or left side of the page
         */
        "anchor": "right" | "left";
        /**
          * Display dim background on top of other content
         */
        "background"?: boolean;
        /**
          * Close by clicking outside of drawer
         */
        "closeAtOutsideClick": boolean;
        "closeModal": () => Promise<void>;
        /**
          * Add little bit of padding to content of drawer
         */
        "insertYPadding"?: boolean;
        "openModal": () => Promise<void>;
        /**
          * Start side drawer open
         */
        "startOpen"?: boolean;
    }
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface KlevuDropdown {
        /**
          * Is element disabled
         */
        "disabled"?: boolean;
        /**
          * Form name
         */
        "name": string;
        /**
          * Options to display in dropdown
         */
        "options": Array<{ value: string; text: String }>;
        /**
          * Which element value is selected
         */
        "selected": string;
        /**
          * Variant of dropdown
         */
        "variant": KlevuDropdownVariant;
    }
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart facet-heading Heading of the facet
     */
    interface KlevuFacet {
        /**
          * Should the facet be in accordion
         */
        "accordion"?: boolean;
        /**
          * Start accordion open
         */
        "accordionStartOpen"?: boolean;
        /**
          * Specific overrides for individual color swatch. The overrides can be colors (hex or valid css colors) or a valid url to load. ImageUrl takes precedence over color when both are specified.
         */
        "colorSwatchOverrides"?: KlevuColorSwatchOverride;
        /**
          * Set predefined order for options. Unfound values are in original order in end
         */
        "customOrder"?: string[];
        /**
          * Override label text with custom value
         */
        "labelOverride"?: string;
        /**
          * Originating filter manager which to modify. This is the most important property of the component. It will be used to modify the filter state for queries.
         */
        "manager": FilterManager;
        /**
          * Which mode should facets be in
         */
        "mode": KlevuFacetMode;
        /**
          * From which options to build facet. Single option value from Klevu SDK FilterManager. Either this or slider must be set.
         */
        "option"?: KlevuFilterResultOptions;
        /**
          * From which slider to build facet.
         */
        "slider"?: KlevuFilterResultSlider;
        "tAll": any;
        "tMore": any;
        /**
          * Converts the color filters to swatches
         */
        "useColorSwatch"?: boolean;
    }
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface KlevuFacetList {
        /**
          * Should use accordions to for facets
         */
        "accordion"?: boolean;
        /**
          * Button text for Apply button when using `useApplyButton`
         */
        "applyButtonText": string;
        /**
          * Button text for Clear button when using `useApplyButton`
         */
        "clearButtonText": string;
        /**
          * Specific overrides for individual color swatch. The overrides can be colors (hex or valid css colors) or a valid url to load. ImageUrl takes precedence over color when both are specified.
         */
        "colorSwatchOverrides"?: {
    [key: string]: KlevuColorSwatchOverride1
  };
        /**
          * Specify which facet keys should be rendered as color swatches
         */
        "colorSwatches"?: string[];
        /**
          * Custom order keys for every facet
         */
        "customOrder"?: { [key: string]: string[] };
        /**
          * Default price label for sliders
         */
        "defaultPriceLabel": string;
        /**
          * Filter managet from which the list is built from
         */
        "manager": FilterManager;
        /**
          * Set mode for facets or if object is passed then define per key
         */
        "mode"?: KlevuFacetMode1 | { [key: string]: KlevuFacetMode1 };
        /**
          * When using `useApplyButton` then this method can be used to update current state filterManager into to local state of that is displayed in the UI
         */
        "updateApplyFilterState": () => Promise<void>;
        /**
          * Display "apply filters" button in the end. And do not apply filters until this button is pressed
         */
        "useApplyButton"?: boolean;
    }
    /**
     * Klevu icon component. Uses Google Material Icons.
     */
    interface KlevuIcon {
        /**
          * Name of the icon. Please use tokens of material icons
         */
        "name": string;
    }
    /**
     * This component allows you to select an image from the file system.
     */
    interface KlevuImagePicker {
        /**
          * To be used to display loading indicator
         */
        "isLoading": boolean;
        /**
          * Provide max file size in MBs
         */
        "maxFileSize": number;
    }
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-positive #2e9c40 Positive color
     * @cssprop --klevu-color-negative #ad2d2d Negative color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-color-accent-1 #8eedd3 Accent color
     * @cssprop --klevu-color-accent-2 #ffcb9f Accent color
     * @cssprop --klevu-color-accent-3 #ffb8d6 Accent color
     * @cssprop --klevu-color-accent-4 #c3d7ff Accent color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface KlevuInit {
        /**
          * Read only API key to Klevu
         */
        "apiKey": string;
        /**
          * @returns KlevuConfig, but due to typescript problems it is any
         */
        "getConfig": () => Promise<any>;
        /**
          * Get settings defined in klevu-init
          * @returns
         */
        "getSettings": () => Promise<KlevuUIGlobalSettings | undefined>;
        "kmcLoadDefaults"?: boolean;
        /**
          * Which language to load
         */
        "language": Translations;
        /**
          * Global settings
         */
        "settings"?: KlevuUIGlobalSettings;
        /**
          * Provide your own translations
         */
        "translation"?: Translation;
        /**
          * Override the default translation URL prefix. Will use format of `${translationUrlPrefix}/translations/${lang}.json`
         */
        "translationUrlPrefix"?: string;
        /**
          * Klevu Server URL
         */
        "url": string;
    }
    /**
     * Lists latest searches user has made on the site
     */
    interface KlevuLatestSearches {
        /**
          * Caption of the list
         */
        "tCaption": any;
    }
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface KlevuLayoutResults {
        /**
          * Can be used to close the drawer programmatically
         */
        "closeDrawer": () => Promise<void>;
    }
    /**
     * Single list item for listing things.
     */
    interface KlevuList {
        /**
          * Condensed version of the list item.
         */
        "condensed": boolean;
        /**
          * Icon to be displayed in the list item. Cannot be used with image.
         */
        "icon"?: string;
        /**
          * Image to be displayed in the list item. Cannot be used with icon.
         */
        "image"?: string;
        "noXPadding": boolean;
        /**
          * Make the whole thing clickable and navigate to this url.
         */
        "url"?: string;
    }
    /**
     * Simple loading indicator
     * @cssprop --klevu-loading-indicator-color --klevu-color-primary Color of the loading indicator
     */
    interface KlevuLoadingIndicator {
    }
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface KlevuMerchandising {
        /**
          * Which category products
         */
        "category": string;
        /**
          * Category title
         */
        "categoryTitle": string;
        /**
          * How many filters per facet to show
         */
        "filterCount"?: number;
        /**
          * Order filters in given order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Count of products for page
         */
        "limit": number;
        /**
          * Object to override and settings on search options
         */
        "options"?: KlevuMerchandisingOptions;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Order of results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Pass custom options for the sort dropdown
         */
        "sortOptions"?: Array<{ value: KlevuSearchSorting; text: string }>;
        /**
          * Text for load more button
         */
        "tLoadMore": any;
        /**
          * Overrides KMC setting to use ABtest for results
         */
        "useABTest"?: boolean;
        /**
          * Should use infinite scroll component to trigger load next
         */
        "useInfiniteScroll"?: boolean;
        /**
          * Should display pagination instead of load next
         */
        "usePagination"?: boolean;
        /**
          * Enable personalisation
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Stylized modal dialog.
     */
    interface KlevuModal {
        /**
          * Closes the modal.
         */
        "closeModal": () => Promise<void>;
        /**
          * Opens the modal.
         */
        "openModal": () => Promise<void>;
        /**
          * Should show the modal on load.
         */
        "startOpen": boolean;
    }
    /**
     * Klevu MOI Application
     */
    interface KlevuMoi {
        /**
          * Override default API key
         */
        "apiKey"?: string;
        "close": () => Promise<void>;
        /**
          * Initialize the MOI session and open window
         */
        "open": () => Promise<void>;
        /**
          * Start the MOI window open
         */
        "startOpen"?: boolean;
    }
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface KlevuPagination {
        /**
          * Current page
         */
        "current"?: number;
        /**
          * Max page
         */
        "max"?: number;
        /**
          * Min page
         */
        "min"?: number;
        /**
          * Query results used to build min, max and current
         */
        "queryResult"?: KlevuQueryResult;
    }
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface KlevuPopularSearches {
        /**
          * Caption of the list
         */
        "tCaption": any;
    }
    /**
     * Popup component where clicking origin component popups the the content
     * @csspart popup-origin Origin component
     * @csspart popup-content Content component
     */
    interface KlevuPopup {
        /**
          * Anchor popup to left or right of page
         */
        "anchor": Placement;
        /**
          * Close popup when clicking outside content area
         */
        "closeAtOutsideClick": boolean;
        /**
          * Closes the popup
         */
        "closeModal": () => Promise<void>;
        /**
          * Elevation of the popup. 0-3.
         */
        "elevation": number;
        /**
          * Expand popup to full size of the screen when popup is smaller that requested width
         */
        "fullscreenOnMobileSize"?: boolean;
        /**
          * How many pixels to offset the popup from origin
         */
        "offset": number;
        /**
          * Open content when origin component is focused
         */
        "openAtFocus": boolean;
        /**
          * Opens the popup
         */
        "openModal": () => Promise<void>;
        /**
          * Element to anchor popup to. If not set popup is anchored to origin slot
         */
        "originElement"?: HTMLElement;
        /**
          * Set width of the popup content
         */
        "popupWidth"?: number;
        /**
          * Initially show the popup
         */
        "startOpen"?: boolean;
        /**
          * Clicking origin again will close the popup
         */
        "toggle"?: boolean;
        /**
          * Darken background when popup is open
         */
        "useBackground": boolean;
    }
    /**
     * Generic product component that renders product based on KlevuRecord of klevu/core
     * All parts of the component can be replaced with slots.
     * By default the products fill the whole space, but it can be limited
     * with --klevu-product-width and --klevu-product-small-width css variables.
     * @csspart product-image The image element of component
     * @csspart product-container The container element of whole
     * @csspart product-swatch Single swatch element under the image
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     * @cssprop --klevu-product-border none Border style of the product
     */
    interface KlevuProduct {
        /**
          * Fallback image url to be used when the product image fails to load.
         */
        "fallbackProductImageUrl"?: string;
        /**
          * Force certain width for product. Do not use max-width
         */
        "fixedWidth"?: boolean;
        /**
          * Hides brand information
         */
        "hideBrand"?: boolean;
        /**
          * Hides description from info
         */
        "hideDescription"?: boolean;
        /**
          * When mousing over product, show hover image if available
         */
        "hideHoverImage"?: boolean;
        /**
          * Hides image
         */
        "hideImage"?: boolean;
        /**
          * Hides name from info
         */
        "hideName"?: boolean;
        /**
          * Hides price from info
         */
        "hidePrice"?: boolean;
        /**
          * Do not show swatches in products
         */
        "hideSwatches"?: boolean;
        /**
          * Turns the component into a product wrapper that handles events automatically. It assumes that whole product is clickable.  Component has only one main slot that can contain any content.  To prevent product clicking use `event.stopPropagation()` in your events.  Component still requires the product parameter as it's data is used send correct data to Klevu analytics
         */
        "isWrapper"?: boolean;
        /**
          * What key to use for brand value
         */
        "keyBrand": string;
        /**
          * What key to use for description value
         */
        "keyDescription": string;
        /**
          * What key to use for name value
         */
        "keyName": string;
        /**
          * Caption to show if product is out of stock
         */
        "outOfStockCaption"?: string;
        /**
          * Product data
         */
        "product"?: Partial<KlevuRecord>;
        /**
          * Show add to cart button
         */
        "showAddToCart"?: boolean;
        /**
          * To show the product code next to product name.
         */
        "showProductCode"?: boolean;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings
         */
        "showRatingsCount"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount": boolean;
        /**
          * Text for add to cart button
         */
        "tAddToCart"?: string;
        /**
          * What variant of product to render
         */
        "variant": KlevuProductVariant;
        /**
          * Text to be added after the price. Usually used to indicate that does the price include VAT or not.
         */
        "vatCaption"?: string;
    }
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-05 spacing between grid items;
     */
    interface KlevuProductGrid {
        /**
          * Force to place products in grid with given number of columns.
         */
        "itemsPerRow"?: number;
    }
    /**
     * Button that is placed on the site to start a product query session
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart product-query-button-icon Icon of the button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     * @csspart button-base The button element
     */
    interface KlevuProductQuery {
        /**
          * Text of the button for asking a question
         */
        "askButtonText"?: string;
        /**
          * Text of the button to open the popup
         */
        "buttonText": string;
        /**
          * Disable closing the popup when clicking outside of it
         */
        "disableCloseOutsideClick"?: boolean;
        /**
          * Fine print of the popup under the title
         */
        "finePrint": string;
        /**
          * Anchor popup to which side of the origin
         */
        "popupAnchor": Placement;
        /**
          * How many pixels to offset the popup from origin
         */
        "popupOffset": number;
        /**
          * Title of the popup
         */
        "popupTitle": string;
        /**
          * Instead of Klevu API-key use a widget id to start a session
         */
        "pqaWidgetId"?: string;
        /**
          * Alternative to url, productId can be used to start a session
         */
        "productId"?: string;
        /**
          * Settings for requests to Klevu. Deeper modification on how the product query works.
         */
        "settings"?: MoiRequest["klevuSettings"];
        /**
          * Placeholder of the textfield
         */
        "textFieldPlaceholder": string;
        /**
          * Variant of the textfield how does it look like
         */
        "textFieldVariant": KlevuTextfieldVariant;
        /**
          * Url of the page where the product is
         */
        "url": string;
        /**
          * Use dark background with the popup
         */
        "useBackground"?: boolean;
        /**
          * Use native scrollbars instead of custom ones
         */
        "useNativeScrollbars"?: boolean;
    }
    /**
     * Klevu Product Query popup application that shows a popup for asking questions about a product
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     */
    interface KlevuProductQueryPopup {
        /**
          * Text of the button for asking a question
         */
        "askButtonText"?: string;
        /**
          * Config for Klevu
         */
        "config"?: KlevuConfig;
        /**
          * Disable closing the popup when clicking outside of it
         */
        "disableCloseOutsideClick"?: boolean;
        /**
          * Element to anchor the product query popup to
         */
        "originElement"?: HTMLElement;
        /**
          * Anchor popup to which side of the origin
         */
        "popupAnchor": Placement;
        /**
          * How many pixels to offset the popup from origin
         */
        "popupOffset"?: number;
        /**
          * Instead of Klevu API-key use a widget id to start a session
         */
        "pqaWidgetId"?: string;
        /**
          * Alternative to url, productId can be used to start a session
         */
        "productId"?: string;
        /**
          * Settings for requests to Klevu. Deeper modification on how the product query works.
         */
        "settings"?: MoiRequest["klevuSettings"];
        /**
          * Text of the button to open the popup
         */
        "tButtonText": any;
        /**
          * Data protection notice when user registering is enabled
         */
        "tDataProtectionNotice": any;
        /**
          * Fine print of the popup under the title
         */
        "tFinePrint": any;
        /**
          * When loading takes a bit longer, show this text
         */
        "tLoadingSorry": any;
        /**
          * Title of the popup
         */
        "tPopupTitle": any;
        /**
          * Description of the feedback section when closing the popup
         */
        "tRateExperienceText": any;
        /**
          * Title of the feedback section when closing the popup
         */
        "tRateExperienceTitle": any;
        /**
          * Placeholder of the textfield
         */
        "tTextFieldPlaceholder": any;
        /**
          * Variant of the textfield how does it look like
         */
        "textFieldVariant": KlevuTextfieldVariant;
        /**
          * Url of the page where the product is
         */
        "url": string;
        /**
          * Use dark background with the popup
         */
        "useBackground"?: boolean;
        /**
          * Use native scrollbars instead of custom ones
         */
        "useNativeScrollbars"?: boolean;
    }
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface KlevuQuery {
        /**
          * Which category to do merchandising. Required for "merchandising" type
         */
        "category"?: string;
        /**
          * Which category title to have on page. Required for "merchandising" type
         */
        "categoryTitle"?: string;
        /**
          * By default component will fetch results on init or on property change. This can be disabled with this prop.
         */
        "disableInitialFetch"?: boolean;
        /**
          * Force component to fetch results. This is called automatically when properties change.
         */
        "fetch": () => Promise<void>;
        /**
          * To how many filters limit results to
         */
        "filterCount"?: number;
        /**
          * Fetch filters on the request
         */
        "filterGet"?: boolean;
        /**
          * Should get price filters
         */
        "filterWithPrices"?: boolean;
        /**
          * What's the limit on page
         */
        "limit"?: number;
        /**
          * @klevu /core FilterManager used for filters. If none is set, new one is created
         */
        "manager": FilterManager;
        /**
          * Offset of results
         */
        "offset"?: number;
        /**
          * Object to override and settings on search options
         */
        "options"?: AllQueryOptions;
        /**
          * Override default modifiers. This will disable default modifiers and ones set by filter props
         */
        "overrideModifiers"?: KlevuFetchModifer[];
        /**
          * Which products are in cart. Required for some recommendation types
         */
        "recommendationCartProductIds"?: string[];
        /**
          * Which category path to use for recommendation. Required for some recommendation types
         */
        "recommendationCategoryPath"?: string;
        /**
          * Which product is currently being viewed. Required for some recommendation types
         */
        "recommendationCurrentProductId"?: string;
        /**
          * Which recommendation to fetch from Klevu Merchant Center. Required for "recommendation" type
         */
        "recommendationId"?: string;
        /**
          * What is the item group id of the product being viewed. Required for some recommendation types
         */
        "recommendationItemGroupId"?: string;
        /**
          * When searching should search suggestions be fetched
         */
        "searchSuggestions"?: boolean;
        /**
          * What to search. Required for "search" type.
         */
        "searchTerm"?: string;
        /**
          * Should search view event be sent. View event is important for analytical cases. In case of a search this should be used only when creating a landing page for search.
         */
        "sendSearchViewEvent"?: boolean;
        /**
          * How to sort
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What kind of query
         */
        "type": "search" | "merchandising" | "recommendation";
        /**
          * Should component listen to changes to filters
         */
        "updateOnFilterChange"?: boolean;
    }
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface KlevuQuicksearch {
        /**
          * Enable Klevu MOI chat
         */
        "enableChat"?: boolean;
        /**
          * Enable image search feature
         */
        "enableImageSearch": boolean;
        /**
          * What term should be used if there isn't enough results
         */
        "fallbackTerm"?: string;
        /**
          * How many products to show in full variant
         */
        "fullResultCount": number;
        /**
          * Hide popular keywords on no results page
         */
        "hidePopularKeywordsOnNoResultsPage"?: boolean;
        /**
          * Hide popular keywords
         */
        "hidePopularSearches"?: boolean;
        /**
          * Hide recent searches
         */
        "hideRecentSearches"?: boolean;
        /**
          * Hide recently viewed products
         */
        "hideRecentlyViewedProducts"?: boolean;
        /**
          * Hide trending products
         */
        "hideTrendingProducts"?: boolean;
        /**
          * HHide trending products on no results page
         */
        "hideTrendingProductsOnNoResultsPage"?: boolean;
        /**
          * Placeholder for input text
         */
        "placeholder"?: string;
        /**
          * How many products to show in Popular products section
         */
        "popularProductsCount": number;
        /**
          * Anchor popup to witch side
         */
        "popupAnchor"?: Placement;
        /**
          * Change variant of the search results
         */
        "resultVariant": KlevuQuicksearchResultVarint;
        /**
          * Should component search for categories too
         */
        "searchCategories"?: boolean;
        /**
          * Should component search for CMS pages too
         */
        "searchCmsPages"?: boolean;
        /**
          * Change variant of the search field
         */
        "searchFieldVariant": SearchFieldVariant;
        /**
          * Text of search button
         */
        "searchText"?: string;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount": boolean;
        /**
          * How many products to show in simple variant
         */
        "simpleResultCount": number;
        /**
          * Title of categories section
         */
        "tCategoriesCaption": any;
        /**
          * Recently clicked tab caption Supports showing the count in place of %s in the value eg: `Recently Searched (%s)` with count of 2 will lead to `Recently Searched (2)`.
         */
        "tLastClickedProductsCaption"?: string;
        /**
          * Popular products section heading
         */
        "tPopularProductsTitle"?: string;
        /**
          * Popular products section heading shown on no results page
         */
        "tPopularProductsTitleOnNoResultsPage"?: string;
        /**
          * Title of search results
         */
        "tSearchResults": any;
        /**
          * Title of button to start Moi session
         */
        "tStartChat": any;
        /**
          * Trending tab caption Supports showing the count in place of %s in the value eg: `Trending (%s)` with count of 2 will lead to `Trending (2)`.
         */
        "tTrendingCaption"?: string;
        /**
          * Pass your own redirect urls for a keyword
         */
        "urlRedirects"?: KMCMapsRootObject["klevu_keywordUrlMap"];
        /**
          * Enables Klaviyo click tracking
         */
        "useKlaviyo"?: boolean;
        /**
          * Enable personalisation
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Klevu ratings component
     * @prop rating - The rating value as a number to show
     * @prop ratingRange - The number of stars to show
     */
    interface KlevuRating {
        /**
          * Rating value
         */
        "rating": number;
        /**
          * Number of stars to show
         */
        "ratingRange": number;
    }
    /**
     * Full recommendation banner solution
     */
    interface KlevuRecommendations {
        /**
          * For cart recommendation you need to provide product id's in cart
         */
        "cartProductIds"?: string[];
        /**
          * For category product recommendation you need to provide categery path
         */
        "categoryPath"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "currentProductId"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "itemGroupId"?: string;
        /**
          * The ID of the recommendation
         */
        "recommendationId": string;
        /**
          * Title of the recommendation
         */
        "recommendationTitle"?: string;
    }
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface KlevuSearchField {
        /**
          * Fallback term to use if there are no results
         */
        "fallbackTerm"?: string;
        /**
          * Fetch next page of results from previous query
          * @param type what type of content to get page from
          * @param pageIndex from what page. If empty next page is fetched
         */
        "getPage": (type: "search" | "category" | "cms", pageIndex?: number) => Promise<void>;
        /**
          * Fetches query result from last request
          * @param type type of query result
          * @returns
         */
        "getQueryResult": (type: "search" | "category" | "cms") => Promise<KlevuResponseQueryObject | undefined>;
        /**
          * Maximum amount of results
         */
        "limit": number;
        /**
          * Programmatically trigger search
          * @param term What to search
         */
        "makeSearch": (term: string) => Promise<void>;
        /**
          * Should try to find categories as well
         */
        "searchCategories"?: boolean;
        /**
          * Should try to find cms pages as well
         */
        "searchCmsPages"?: boolean;
        /**
          * Should search products
         */
        "searchProducts"?: boolean;
        /**
          * Should search suggestions
         */
        "searchSuggestions"?: boolean;
        /**
          * Sends analytics when making query
         */
        "sendAnalytics"?: boolean;
        /**
          * In case you want to sort the results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * The placeholder text to display in the search field.
         */
        "tPlaceholder": any;
        /**
          * Button text
         */
        "tSearchText": any;
        /**
          * Enable Klaviyo integration for search terms and clicks
         */
        "useKlaviyo"?: boolean;
        /**
          * Enable personalisation on the query
         */
        "usePersonalisation"?: boolean;
        /**
          * Variant of the search field
         */
        "variant": SearchFieldVariant1;
    }
    /**
     * Full app component for search landing page
     */
    interface KlevuSearchLandingPage {
        /**
          * How many products to display in filters
         */
        "filterCount"?: number;
        /**
          * Order filters in a customer order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Hide filters on results page
         */
        "hideFilters"?: boolean;
        /**
          * Hides price from search results
         */
        "hidePrice"?: boolean;
        /**
          * Pass image url if performing image search
         */
        "imageUrlForSearch": string;
        /**
          * How many results to display on a page
         */
        "limit": number;
        /**
          * How many products to show in popular products
         */
        "popularProductsResultCount": number;
        /**
          * The factor to use to generate the ranges
         */
        "priceInterval": number;
        /**
          * Show price as options
         */
        "showPriceAsSlider"?: boolean;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Show the quick search box at the top of the page
         */
        "showSearch"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount": boolean;
        /**
          * In which order to set the products
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Text of load more button
         */
        "tLoadMore": any;
        /**
          * The title of the page
         */
        "tSearchTitle": any;
        /**
          * What term was used for search
         */
        "term": string;
        /**
          * Should use infinite scroll component to trigger load next
         */
        "useInfiniteScroll"?: boolean;
        /**
          * Enable Klaviyo integration
         */
        "useKlaviyo"?: boolean;
        /**
          * Specify whether to show checkboxes or radio buttons for filters
         */
        "useMultiSelectFilters"?: boolean;
        /**
          * Use pagination instead of loading more
         */
        "usePagination"?: boolean;
        /**
          * Enable personalization
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface KlevuSlider {
        /**
          * Current end value of the range
         */
        "end"?: number;
        /**
          * Format tooltip value with function
         */
        "formatTooltip"?: (value: number) => string;
        /**
          * Max value of the range
         */
        "max": number;
        /**
          * Min value of the range
         */
        "min": number;
        /**
          * Show tooltips on top of slider
         */
        "showTooltips"?: boolean;
        /**
          * Current start value of the range
         */
        "start"?: number;
    }
    /**
     * Horizontal slides component. Can be used to display a list of items horizontally. Has optional title and next/prev buttons.
     * @cssprop --klevu-slides-item-width - Force a width for each item in the slides
     */
    interface KlevuSlides {
        /**
          * Heading for the slides component
         */
        "heading"?: string;
        /**
          * Hides next and previous buttons
         */
        "hideNextPrev"?: boolean;
        /**
          * When clicking next/prev buttons should scroll full width of container
         */
        "slideFullWidth"?: boolean;
    }
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface KlevuSort {
        /**
          * Pass custom options for the sort dropdown
         */
        "options": Array<{ value: KlevuSearchSorting; text: string }>;
        /**
          * Dropdown variant
         */
        "variant": KlevuDropdownVariant1;
    }
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface KlevuSuggestionsList {
        /**
          * Caption on the list
         */
        "caption": string;
        /**
          * Suggestions to render in list
         */
        "suggestions": string[];
    }
    /**
     * Very simple tab component. Use like a button, but with a caption.
     * Use standard onClick event to handle click.
     */
    interface KlevuTab {
        /**
          * Whether the tab is active
         */
        "active"?: boolean;
        /**
          * Title of the tab
         */
        "caption": string;
        /**
          * Whether the tab is disabled
         */
        "disabled"?: boolean;
    }
    /**
     * Branded text field component
     */
    interface KlevuTextfield {
        /**
          * Display a button to clear field value on the right side of the field
         */
        "clearButton"?: boolean;
        /**
          * Is field disabled
         */
        "disabled": boolean;
        /**
          * Is field in error state
         */
        "error"?: boolean;
        /**
          * Icon to display in textfield start of the field. Please use tokens of material icons
         */
        "icon"?: string;
        /**
          * Placeholder value of the field
         */
        "placeholder"?: string;
        /**
          * Current value of the field
         */
        "value": string;
        /**
          * Variant of textfield
         */
        "variant": KlevuTextfieldVariant1;
    }
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-typography-color - Color of the text that overrides the default
     * @cssprop --klevu-typography-font-weight - Font weight that overrides the default
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface KlevuTypography {
        /**
          * Display the text in full width. Usefull when typography needs to be used as a block element.
         */
        "fullWidth"?: boolean;
        /**
          * Variant of heading
         */
        "variant": KlevuTypographyVariant;
    }
    /**
     * Utility compoenent that simplifies listening Klevu SDK Dom events
     * https://docs.klevu.com/headless-sdk/events-analytics#dhk6Y
     */
    interface KlevuUtilDomEvents {
    }
    /**
     * Component that triggers event when intercepted on scroll of page.
     */
    interface KlevuUtilInfiniteScroll {
        /**
          * Whether infinite scrolling is enabled
         */
        "enabled": boolean;
        /**
          * The number of pages after which triggers infiniteScrollingPaused event. Listen to this event to allow further loading on user input.
         */
        "infiniteScrollPauseThreshold": number;
    }
    /**
     * Portal component to move content to end of body instead of normal DOM position. Typically used for popups
     * to prevent problems with CSS stylings.
     * Does not move styles, so create a child component that has styles defined in shadow DOM.
     */
    interface KlevuUtilPortal {
    }
    /**
     * Utility that replaces the default browser scrollbar with a custom one.
     * @cssprop --klevu-util-scrollbar-handle-bg --klevu-color-neutral-5 The background color of the scrollbar handle.
     * @cssprop --klevu-util-scrollbar-handle-bg-hover --klevu-color-neutral-6 The background color of the scrollbar handle when hovered.
     * @cssprop --klevu-util-scrollbar-handle-bg-active --klevu-color-neutral-7 The background color of the scrollbar handle when active.
     */
    interface KlevuUtilScrollbars {
        "getContainer": () => Promise<HTMLDivElement | undefined>;
        "getInstance": () => Promise<{ customInstance: OverlayScrollbars | undefined; nativeContainer: HTMLDivElement | undefined; }>;
        /**
          * The overflow behavior of the horizontal scrollbar.
         */
        "overflowX"?: OverflowBehavior;
        /**
          * The overflow behavior of the vertical scrollbar.
         */
        "overflowY"?: OverflowBehavior;
        /**
          * Disables the custom scrollbar and use native scrollbars instead.
         */
        "useNative"?: boolean;
    }
    interface KlevuUtilViewport {
        "getCurrentSize": () => Promise<ViewportSize | undefined>;
        /**
          * List of sizes to listen for
         */
        "sizes": ViewportSize[];
    }
}
export interface KlevuBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuBadgeElement;
}
export interface KlevuBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuBannerElement;
}
export interface KlevuChatBubbleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuChatBubbleElement;
}
export interface KlevuChatLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuChatLayoutElement;
}
export interface KlevuChatMessagesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuChatMessagesElement;
}
export interface KlevuCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuCheckboxElement;
}
export interface KlevuChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuChipElement;
}
export interface KlevuCmsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuCmsListElement;
}
export interface KlevuColorSwatchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuColorSwatchElement;
}
export interface KlevuDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuDropdownElement;
}
export interface KlevuFacetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuFacetElement;
}
export interface KlevuFacetListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuFacetListElement;
}
export interface KlevuImagePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuImagePickerElement;
}
export interface KlevuLatestSearchesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuLatestSearchesElement;
}
export interface KlevuLayoutResultsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuLayoutResultsElement;
}
export interface KlevuMerchandisingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuMerchandisingElement;
}
export interface KlevuModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuModalElement;
}
export interface KlevuMoiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuMoiElement;
}
export interface KlevuPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuPaginationElement;
}
export interface KlevuPopularSearchesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuPopularSearchesElement;
}
export interface KlevuPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuPopupElement;
}
export interface KlevuProductCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuProductElement;
}
export interface KlevuQueryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuQueryElement;
}
export interface KlevuQuicksearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuQuicksearchElement;
}
export interface KlevuRecommendationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuRecommendationsElement;
}
export interface KlevuSearchFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSearchFieldElement;
}
export interface KlevuSearchLandingPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSearchLandingPageElement;
}
export interface KlevuSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSliderElement;
}
export interface KlevuSortCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSortElement;
}
export interface KlevuSuggestionsListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuSuggestionsListElement;
}
export interface KlevuTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuTextfieldElement;
}
export interface KlevuUtilDomEventsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuUtilDomEventsElement;
}
export interface KlevuUtilInfiniteScrollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuUtilInfiniteScrollElement;
}
export interface KlevuUtilViewportCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKlevuUtilViewportElement;
}
declare global {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface HTMLKlevuAccordionElement extends Components.KlevuAccordion, HTMLStencilElement {
    }
    var HTMLKlevuAccordionElement: {
        prototype: HTMLKlevuAccordionElement;
        new (): HTMLKlevuAccordionElement;
    };
    /**
     * Basic badge component. Can be used to display small information on top of other elements. Typically
     * used to display things on top of product.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface HTMLKlevuBadgeElement extends Components.KlevuBadge, HTMLStencilElement {
    }
    var HTMLKlevuBadgeElement: {
        prototype: HTMLKlevuBadgeElement;
        new (): HTMLKlevuBadgeElement;
    };
    /**
     * Component that displays a typical klevu banner
     */
    interface HTMLKlevuBannerElement extends Components.KlevuBanner, HTMLStencilElement {
    }
    var HTMLKlevuBannerElement: {
        prototype: HTMLKlevuBannerElement;
        new (): HTMLKlevuBannerElement;
    };
    /**
     * Basic button component
     * @csspart button-base The button element
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     * @cssprop --klevu-button-text-align center Align text on button
     * @cssprop --klevu-button-padding calculated Override buttom padding with custom value
     * @cssprop --klevu-button-font-size --klevu-body-s-size Size of button text
     */
    interface HTMLKlevuButtonElement extends Components.KlevuButton, HTMLStencilElement {
    }
    var HTMLKlevuButtonElement: {
        prototype: HTMLKlevuButtonElement;
        new (): HTMLKlevuButtonElement;
    };
    /**
     * Container for chat items. Very simple component, just a wrapper.
     * @cssprop --klevu-chat-bubble-background --klevu-color-neutral-2 Background color of the bubble
     * @cssprop --klevu-chat-bubble-background-remote --klevu-color-primary Background color of the bubble when remote
     * @cssprop --klevu-chat-bubble-text-color inherit Text color of the bubble
     * @cssprop --klevu-chat-bubble-text-color-remote --klevu-color-neutral-1 Text color of the bubble when remote
     */
    interface HTMLKlevuChatBubbleElement extends Components.KlevuChatBubble, HTMLStencilElement {
    }
    var HTMLKlevuChatBubbleElement: {
        prototype: HTMLKlevuChatBubbleElement;
        new (): HTMLKlevuChatBubbleElement;
    };
    /**
     * Component that wraps chat elements into a layout.
     * @cssprop --klevu-chat-layout-max-height 100vh The maxium height for the chat layout.
     */
    interface HTMLKlevuChatLayoutElement extends Components.KlevuChatLayout, HTMLStencilElement {
    }
    var HTMLKlevuChatLayoutElement: {
        prototype: HTMLKlevuChatLayoutElement;
        new (): HTMLKlevuChatLayoutElement;
    };
    interface HTMLKlevuChatMessagesElement extends Components.KlevuChatMessages, HTMLStencilElement {
    }
    var HTMLKlevuChatMessagesElement: {
        prototype: HTMLKlevuChatMessagesElement;
        new (): HTMLKlevuChatMessagesElement;
    };
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface HTMLKlevuCheckboxElement extends Components.KlevuCheckbox, HTMLStencilElement {
    }
    var HTMLKlevuCheckboxElement: {
        prototype: HTMLKlevuCheckboxElement;
        new (): HTMLKlevuCheckboxElement;
    };
    /**
     * Chip component that is used to display selected value in a listing. Gives also ability to remove the chip.
     * Has selected and removable attributes that can be used to display the chip in selected state and also to remove the chip.
     * @cssprop --klevu-chip-radius --klevu-border-radius-xxl Border radius of the chip
     * @cssprop --klevu-chip-border --klevu-color-neutral-5 Border color of the chip
     * @cssprop --klevu-chip-selected-background klevu-color-primary-with-opacity Selected background color of the chip
     * @cssprop --klevu-chip-selected-border --klevu-color-primary Selected border color of the chip
     */
    interface HTMLKlevuChipElement extends Components.KlevuChip, HTMLStencilElement {
    }
    var HTMLKlevuChipElement: {
        prototype: HTMLKlevuChipElement;
        new (): HTMLKlevuChipElement;
    };
    /**
     * Component to display list of CMS page results
     */
    interface HTMLKlevuCmsListElement extends Components.KlevuCmsList, HTMLStencilElement {
    }
    var HTMLKlevuCmsListElement: {
        prototype: HTMLKlevuCmsListElement;
        new (): HTMLKlevuCmsListElement;
    };
    /**
     * Color Swatch component
     * @cssprop --klevu-color-swatch-border #8c8c8c Border on swatch
     * @cssprop --klevu-color-swatch-default-background #000 Shown when color not found in css
     * @cssprop --klevu-color-swatch-size 25px Size of swatch
     * @cssprop --klevu-color-swatch-selected-color #2b4af7 Ring color when selected
     * @cssprop --klevu-color-swatch-border-radius 50% To change the shape of swatch
     */
    interface HTMLKlevuColorSwatchElement extends Components.KlevuColorSwatch, HTMLStencilElement {
    }
    var HTMLKlevuColorSwatchElement: {
        prototype: HTMLKlevuColorSwatchElement;
        new (): HTMLKlevuColorSwatchElement;
    };
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     * @cssprop --klevu-drawer-width 400px width of drawer
     */
    interface HTMLKlevuDrawerElement extends Components.KlevuDrawer, HTMLStencilElement {
    }
    var HTMLKlevuDrawerElement: {
        prototype: HTMLKlevuDrawerElement;
        new (): HTMLKlevuDrawerElement;
    };
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface HTMLKlevuDropdownElement extends Components.KlevuDropdown, HTMLStencilElement {
    }
    var HTMLKlevuDropdownElement: {
        prototype: HTMLKlevuDropdownElement;
        new (): HTMLKlevuDropdownElement;
    };
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart facet-heading Heading of the facet
     */
    interface HTMLKlevuFacetElement extends Components.KlevuFacet, HTMLStencilElement {
    }
    var HTMLKlevuFacetElement: {
        prototype: HTMLKlevuFacetElement;
        new (): HTMLKlevuFacetElement;
    };
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface HTMLKlevuFacetListElement extends Components.KlevuFacetList, HTMLStencilElement {
    }
    var HTMLKlevuFacetListElement: {
        prototype: HTMLKlevuFacetListElement;
        new (): HTMLKlevuFacetListElement;
    };
    /**
     * Klevu icon component. Uses Google Material Icons.
     */
    interface HTMLKlevuIconElement extends Components.KlevuIcon, HTMLStencilElement {
    }
    var HTMLKlevuIconElement: {
        prototype: HTMLKlevuIconElement;
        new (): HTMLKlevuIconElement;
    };
    /**
     * This component allows you to select an image from the file system.
     */
    interface HTMLKlevuImagePickerElement extends Components.KlevuImagePicker, HTMLStencilElement {
    }
    var HTMLKlevuImagePickerElement: {
        prototype: HTMLKlevuImagePickerElement;
        new (): HTMLKlevuImagePickerElement;
    };
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-positive #2e9c40 Positive color
     * @cssprop --klevu-color-negative #ad2d2d Negative color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-color-accent-1 #8eedd3 Accent color
     * @cssprop --klevu-color-accent-2 #ffcb9f Accent color
     * @cssprop --klevu-color-accent-3 #ffb8d6 Accent color
     * @cssprop --klevu-color-accent-4 #c3d7ff Accent color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface HTMLKlevuInitElement extends Components.KlevuInit, HTMLStencilElement {
    }
    var HTMLKlevuInitElement: {
        prototype: HTMLKlevuInitElement;
        new (): HTMLKlevuInitElement;
    };
    /**
     * Lists latest searches user has made on the site
     */
    interface HTMLKlevuLatestSearchesElement extends Components.KlevuLatestSearches, HTMLStencilElement {
    }
    var HTMLKlevuLatestSearchesElement: {
        prototype: HTMLKlevuLatestSearchesElement;
        new (): HTMLKlevuLatestSearchesElement;
    };
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface HTMLKlevuLayoutResultsElement extends Components.KlevuLayoutResults, HTMLStencilElement {
    }
    var HTMLKlevuLayoutResultsElement: {
        prototype: HTMLKlevuLayoutResultsElement;
        new (): HTMLKlevuLayoutResultsElement;
    };
    /**
     * Single list item for listing things.
     */
    interface HTMLKlevuListElement extends Components.KlevuList, HTMLStencilElement {
    }
    var HTMLKlevuListElement: {
        prototype: HTMLKlevuListElement;
        new (): HTMLKlevuListElement;
    };
    /**
     * Simple loading indicator
     * @cssprop --klevu-loading-indicator-color --klevu-color-primary Color of the loading indicator
     */
    interface HTMLKlevuLoadingIndicatorElement extends Components.KlevuLoadingIndicator, HTMLStencilElement {
    }
    var HTMLKlevuLoadingIndicatorElement: {
        prototype: HTMLKlevuLoadingIndicatorElement;
        new (): HTMLKlevuLoadingIndicatorElement;
    };
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface HTMLKlevuMerchandisingElement extends Components.KlevuMerchandising, HTMLStencilElement {
    }
    var HTMLKlevuMerchandisingElement: {
        prototype: HTMLKlevuMerchandisingElement;
        new (): HTMLKlevuMerchandisingElement;
    };
    /**
     * Stylized modal dialog.
     */
    interface HTMLKlevuModalElement extends Components.KlevuModal, HTMLStencilElement {
    }
    var HTMLKlevuModalElement: {
        prototype: HTMLKlevuModalElement;
        new (): HTMLKlevuModalElement;
    };
    /**
     * Klevu MOI Application
     */
    interface HTMLKlevuMoiElement extends Components.KlevuMoi, HTMLStencilElement {
    }
    var HTMLKlevuMoiElement: {
        prototype: HTMLKlevuMoiElement;
        new (): HTMLKlevuMoiElement;
    };
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface HTMLKlevuPaginationElement extends Components.KlevuPagination, HTMLStencilElement {
    }
    var HTMLKlevuPaginationElement: {
        prototype: HTMLKlevuPaginationElement;
        new (): HTMLKlevuPaginationElement;
    };
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface HTMLKlevuPopularSearchesElement extends Components.KlevuPopularSearches, HTMLStencilElement {
    }
    var HTMLKlevuPopularSearchesElement: {
        prototype: HTMLKlevuPopularSearchesElement;
        new (): HTMLKlevuPopularSearchesElement;
    };
    /**
     * Popup component where clicking origin component popups the the content
     * @csspart popup-origin Origin component
     * @csspart popup-content Content component
     */
    interface HTMLKlevuPopupElement extends Components.KlevuPopup, HTMLStencilElement {
    }
    var HTMLKlevuPopupElement: {
        prototype: HTMLKlevuPopupElement;
        new (): HTMLKlevuPopupElement;
    };
    /**
     * Generic product component that renders product based on KlevuRecord of klevu/core
     * All parts of the component can be replaced with slots.
     * By default the products fill the whole space, but it can be limited
     * with --klevu-product-width and --klevu-product-small-width css variables.
     * @csspart product-image The image element of component
     * @csspart product-container The container element of whole
     * @csspart product-swatch Single swatch element under the image
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     * @cssprop --klevu-product-border none Border style of the product
     */
    interface HTMLKlevuProductElement extends Components.KlevuProduct, HTMLStencilElement {
    }
    var HTMLKlevuProductElement: {
        prototype: HTMLKlevuProductElement;
        new (): HTMLKlevuProductElement;
    };
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-05 spacing between grid items;
     */
    interface HTMLKlevuProductGridElement extends Components.KlevuProductGrid, HTMLStencilElement {
    }
    var HTMLKlevuProductGridElement: {
        prototype: HTMLKlevuProductGridElement;
        new (): HTMLKlevuProductGridElement;
    };
    /**
     * Button that is placed on the site to start a product query session
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart product-query-button-icon Icon of the button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     * @csspart button-base The button element
     */
    interface HTMLKlevuProductQueryElement extends Components.KlevuProductQuery, HTMLStencilElement {
    }
    var HTMLKlevuProductQueryElement: {
        prototype: HTMLKlevuProductQueryElement;
        new (): HTMLKlevuProductQueryElement;
    };
    /**
     * Klevu Product Query popup application that shows a popup for asking questions about a product
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     */
    interface HTMLKlevuProductQueryPopupElement extends Components.KlevuProductQueryPopup, HTMLStencilElement {
    }
    var HTMLKlevuProductQueryPopupElement: {
        prototype: HTMLKlevuProductQueryPopupElement;
        new (): HTMLKlevuProductQueryPopupElement;
    };
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface HTMLKlevuQueryElement extends Components.KlevuQuery, HTMLStencilElement {
    }
    var HTMLKlevuQueryElement: {
        prototype: HTMLKlevuQueryElement;
        new (): HTMLKlevuQueryElement;
    };
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface HTMLKlevuQuicksearchElement extends Components.KlevuQuicksearch, HTMLStencilElement {
    }
    var HTMLKlevuQuicksearchElement: {
        prototype: HTMLKlevuQuicksearchElement;
        new (): HTMLKlevuQuicksearchElement;
    };
    /**
     * Klevu ratings component
     * @prop rating - The rating value as a number to show
     * @prop ratingRange - The number of stars to show
     */
    interface HTMLKlevuRatingElement extends Components.KlevuRating, HTMLStencilElement {
    }
    var HTMLKlevuRatingElement: {
        prototype: HTMLKlevuRatingElement;
        new (): HTMLKlevuRatingElement;
    };
    /**
     * Full recommendation banner solution
     */
    interface HTMLKlevuRecommendationsElement extends Components.KlevuRecommendations, HTMLStencilElement {
    }
    var HTMLKlevuRecommendationsElement: {
        prototype: HTMLKlevuRecommendationsElement;
        new (): HTMLKlevuRecommendationsElement;
    };
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface HTMLKlevuSearchFieldElement extends Components.KlevuSearchField, HTMLStencilElement {
    }
    var HTMLKlevuSearchFieldElement: {
        prototype: HTMLKlevuSearchFieldElement;
        new (): HTMLKlevuSearchFieldElement;
    };
    /**
     * Full app component for search landing page
     */
    interface HTMLKlevuSearchLandingPageElement extends Components.KlevuSearchLandingPage, HTMLStencilElement {
    }
    var HTMLKlevuSearchLandingPageElement: {
        prototype: HTMLKlevuSearchLandingPageElement;
        new (): HTMLKlevuSearchLandingPageElement;
    };
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface HTMLKlevuSliderElement extends Components.KlevuSlider, HTMLStencilElement {
    }
    var HTMLKlevuSliderElement: {
        prototype: HTMLKlevuSliderElement;
        new (): HTMLKlevuSliderElement;
    };
    /**
     * Horizontal slides component. Can be used to display a list of items horizontally. Has optional title and next/prev buttons.
     * @cssprop --klevu-slides-item-width - Force a width for each item in the slides
     */
    interface HTMLKlevuSlidesElement extends Components.KlevuSlides, HTMLStencilElement {
    }
    var HTMLKlevuSlidesElement: {
        prototype: HTMLKlevuSlidesElement;
        new (): HTMLKlevuSlidesElement;
    };
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface HTMLKlevuSortElement extends Components.KlevuSort, HTMLStencilElement {
    }
    var HTMLKlevuSortElement: {
        prototype: HTMLKlevuSortElement;
        new (): HTMLKlevuSortElement;
    };
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface HTMLKlevuSuggestionsListElement extends Components.KlevuSuggestionsList, HTMLStencilElement {
    }
    var HTMLKlevuSuggestionsListElement: {
        prototype: HTMLKlevuSuggestionsListElement;
        new (): HTMLKlevuSuggestionsListElement;
    };
    /**
     * Very simple tab component. Use like a button, but with a caption.
     * Use standard onClick event to handle click.
     */
    interface HTMLKlevuTabElement extends Components.KlevuTab, HTMLStencilElement {
    }
    var HTMLKlevuTabElement: {
        prototype: HTMLKlevuTabElement;
        new (): HTMLKlevuTabElement;
    };
    /**
     * Branded text field component
     */
    interface HTMLKlevuTextfieldElement extends Components.KlevuTextfield, HTMLStencilElement {
    }
    var HTMLKlevuTextfieldElement: {
        prototype: HTMLKlevuTextfieldElement;
        new (): HTMLKlevuTextfieldElement;
    };
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-typography-color - Color of the text that overrides the default
     * @cssprop --klevu-typography-font-weight - Font weight that overrides the default
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface HTMLKlevuTypographyElement extends Components.KlevuTypography, HTMLStencilElement {
    }
    var HTMLKlevuTypographyElement: {
        prototype: HTMLKlevuTypographyElement;
        new (): HTMLKlevuTypographyElement;
    };
    /**
     * Utility compoenent that simplifies listening Klevu SDK Dom events
     * https://docs.klevu.com/headless-sdk/events-analytics#dhk6Y
     */
    interface HTMLKlevuUtilDomEventsElement extends Components.KlevuUtilDomEvents, HTMLStencilElement {
    }
    var HTMLKlevuUtilDomEventsElement: {
        prototype: HTMLKlevuUtilDomEventsElement;
        new (): HTMLKlevuUtilDomEventsElement;
    };
    /**
     * Component that triggers event when intercepted on scroll of page.
     */
    interface HTMLKlevuUtilInfiniteScrollElement extends Components.KlevuUtilInfiniteScroll, HTMLStencilElement {
    }
    var HTMLKlevuUtilInfiniteScrollElement: {
        prototype: HTMLKlevuUtilInfiniteScrollElement;
        new (): HTMLKlevuUtilInfiniteScrollElement;
    };
    /**
     * Portal component to move content to end of body instead of normal DOM position. Typically used for popups
     * to prevent problems with CSS stylings.
     * Does not move styles, so create a child component that has styles defined in shadow DOM.
     */
    interface HTMLKlevuUtilPortalElement extends Components.KlevuUtilPortal, HTMLStencilElement {
    }
    var HTMLKlevuUtilPortalElement: {
        prototype: HTMLKlevuUtilPortalElement;
        new (): HTMLKlevuUtilPortalElement;
    };
    /**
     * Utility that replaces the default browser scrollbar with a custom one.
     * @cssprop --klevu-util-scrollbar-handle-bg --klevu-color-neutral-5 The background color of the scrollbar handle.
     * @cssprop --klevu-util-scrollbar-handle-bg-hover --klevu-color-neutral-6 The background color of the scrollbar handle when hovered.
     * @cssprop --klevu-util-scrollbar-handle-bg-active --klevu-color-neutral-7 The background color of the scrollbar handle when active.
     */
    interface HTMLKlevuUtilScrollbarsElement extends Components.KlevuUtilScrollbars, HTMLStencilElement {
    }
    var HTMLKlevuUtilScrollbarsElement: {
        prototype: HTMLKlevuUtilScrollbarsElement;
        new (): HTMLKlevuUtilScrollbarsElement;
    };
    interface HTMLKlevuUtilViewportElement extends Components.KlevuUtilViewport, HTMLStencilElement {
    }
    var HTMLKlevuUtilViewportElement: {
        prototype: HTMLKlevuUtilViewportElement;
        new (): HTMLKlevuUtilViewportElement;
    };
    interface HTMLElementTagNameMap {
        "klevu-accordion": HTMLKlevuAccordionElement;
        "klevu-badge": HTMLKlevuBadgeElement;
        "klevu-banner": HTMLKlevuBannerElement;
        "klevu-button": HTMLKlevuButtonElement;
        "klevu-chat-bubble": HTMLKlevuChatBubbleElement;
        "klevu-chat-layout": HTMLKlevuChatLayoutElement;
        "klevu-chat-messages": HTMLKlevuChatMessagesElement;
        "klevu-checkbox": HTMLKlevuCheckboxElement;
        "klevu-chip": HTMLKlevuChipElement;
        "klevu-cms-list": HTMLKlevuCmsListElement;
        "klevu-color-swatch": HTMLKlevuColorSwatchElement;
        "klevu-drawer": HTMLKlevuDrawerElement;
        "klevu-dropdown": HTMLKlevuDropdownElement;
        "klevu-facet": HTMLKlevuFacetElement;
        "klevu-facet-list": HTMLKlevuFacetListElement;
        "klevu-icon": HTMLKlevuIconElement;
        "klevu-image-picker": HTMLKlevuImagePickerElement;
        "klevu-init": HTMLKlevuInitElement;
        "klevu-latest-searches": HTMLKlevuLatestSearchesElement;
        "klevu-layout-results": HTMLKlevuLayoutResultsElement;
        "klevu-list": HTMLKlevuListElement;
        "klevu-loading-indicator": HTMLKlevuLoadingIndicatorElement;
        "klevu-merchandising": HTMLKlevuMerchandisingElement;
        "klevu-modal": HTMLKlevuModalElement;
        "klevu-moi": HTMLKlevuMoiElement;
        "klevu-pagination": HTMLKlevuPaginationElement;
        "klevu-popular-searches": HTMLKlevuPopularSearchesElement;
        "klevu-popup": HTMLKlevuPopupElement;
        "klevu-product": HTMLKlevuProductElement;
        "klevu-product-grid": HTMLKlevuProductGridElement;
        "klevu-product-query": HTMLKlevuProductQueryElement;
        "klevu-product-query-popup": HTMLKlevuProductQueryPopupElement;
        "klevu-query": HTMLKlevuQueryElement;
        "klevu-quicksearch": HTMLKlevuQuicksearchElement;
        "klevu-rating": HTMLKlevuRatingElement;
        "klevu-recommendations": HTMLKlevuRecommendationsElement;
        "klevu-search-field": HTMLKlevuSearchFieldElement;
        "klevu-search-landing-page": HTMLKlevuSearchLandingPageElement;
        "klevu-slider": HTMLKlevuSliderElement;
        "klevu-slides": HTMLKlevuSlidesElement;
        "klevu-sort": HTMLKlevuSortElement;
        "klevu-suggestions-list": HTMLKlevuSuggestionsListElement;
        "klevu-tab": HTMLKlevuTabElement;
        "klevu-textfield": HTMLKlevuTextfieldElement;
        "klevu-typography": HTMLKlevuTypographyElement;
        "klevu-util-dom-events": HTMLKlevuUtilDomEventsElement;
        "klevu-util-infinite-scroll": HTMLKlevuUtilInfiniteScrollElement;
        "klevu-util-portal": HTMLKlevuUtilPortalElement;
        "klevu-util-scrollbars": HTMLKlevuUtilScrollbarsElement;
        "klevu-util-viewport": HTMLKlevuUtilViewportElement;
    }
}
declare namespace LocalJSX {
    /**
     * Component that wrap two slots to create accordion element.
     * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
     * @cssprop --klevu-accordion-background transparent Header background
     * @cssprop --klevu-accordion-content-height 600px Maxium height for content
     */
    interface KlevuAccordion {
        /**
          * is accordion open
         */
        "open"?: boolean;
        /**
          * Should it initially be open
         */
        "startOpen"?: boolean;
    }
    /**
     * Basic badge component. Can be used to display small information on top of other elements. Typically
     * used to display things on top of product.
     * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
     * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
     */
    interface KlevuBadge {
        /**
          * Setting a acceent color to badge
         */
        "accent"?: number;
        /**
          * Setting a neutral color to badge
         */
        "neutral"?: number;
        "onKlevuBadgeClose"?: (event: KlevuBadgeCustomEvent<void>) => void;
    }
    /**
     * Component that displays a typical klevu banner
     */
    interface KlevuBanner {
        /**
          * The alt text to display for iamge
         */
        "altText": string;
        /**
          * The image url to display
         */
        "imageUrl": string;
        /**
          * The link url to navigate to
         */
        "linkUrl": string;
        /**
          * Event emitted when the banner is clicked. Sends the link url as the event detail  If defaultPrevented is called on the event, the link will not be followed
         */
        "onKlevuBannerClick"?: (event: KlevuBannerCustomEvent<string>) => void;
        /**
          * The target to open the link in
         */
        "target"?: "_blank" | "_self";
    }
    /**
     * Basic button component
     * @csspart button-base The button element
     * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
     * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
     * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
     * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
     * @cssprop --klevu-button-text-align center Align text on button
     * @cssprop --klevu-button-padding calculated Override buttom padding with custom value
     * @cssprop --klevu-button-font-size --klevu-body-s-size Size of button text
     */
    interface KlevuButton {
        /**
          * Is button disabled
         */
        "disabled"?: boolean;
        /**
          * Make button display block
         */
        "fullWidth"?: boolean;
        /**
          * Instead of content have an icon. So basically icon-button
         */
        "icon"?: string;
        /**
          * Toned down secondary button
         */
        "isSecondary"?: boolean;
        /**
          * Toned down tertiary button
         */
        "isTertiary"?: boolean;
        "size"?: "tiny" | "small" | "normal" | "large";
    }
    /**
     * Container for chat items. Very simple component, just a wrapper.
     * @cssprop --klevu-chat-bubble-background --klevu-color-neutral-2 Background color of the bubble
     * @cssprop --klevu-chat-bubble-background-remote --klevu-color-primary Background color of the bubble when remote
     * @cssprop --klevu-chat-bubble-text-color inherit Text color of the bubble
     * @cssprop --klevu-chat-bubble-text-color-remote --klevu-color-neutral-1 Text color of the bubble when remote
     */
    interface KlevuChatBubble {
        /**
          * Has user given feedback to this message
         */
        "feedback"?: MoiSavedFeedback;
        /**
          * List of feedback reasons to show after the message
         */
        "feedbackReasons"?: string[];
        "onKlevuMessageFeedbackReason"?: (event: KlevuChatBubbleCustomEvent<KlevuMessageFeedbackReasonDetails>) => void;
        /**
          * Is the message from the user or from the bot
         */
        "remote"?: boolean;
        /**
          * Text for rating reason title
         */
        "tRatingReason"?: any;
    }
    /**
     * Component that wraps chat elements into a layout.
     * @cssprop --klevu-chat-layout-max-height 100vh The maxium height for the chat layout.
     */
    interface KlevuChatLayout {
        /**
          * Event emitted when user sends a message
         */
        "onKlevuChatLayoutMessageSent"?: (event: KlevuChatLayoutCustomEvent<string>) => void;
        /**
          * Use native scrollbars instead of custom ones in content
         */
        "useNativeScrollbars"?: boolean;
    }
    interface KlevuChatMessages {
        /**
          * Should display a feedback button after each message
         */
        "enableMessageFeedback"?: boolean;
        /**
          * Feedbacks given by user
         */
        "feedbacks"?: MoiSavedFeedback[];
        /**
          * Messages received from Moi backend
         */
        "messages"?: MoiMessages;
        /**
          * When product is clicked
         */
        "onKlevuChatProductClick"?: (event: KlevuChatMessagesCustomEvent<{ product: MoiProduct }>) => void;
        /**
          * When feedback is given
         */
        "onKlevuMessageFeedback"?: (event: KlevuChatMessagesCustomEvent<onKlevuMessageFeedbackDetails>) => void;
        /**
          * When product filter is clicked
         */
        "onKlevuSelectFilter"?: (event: KlevuChatMessagesCustomEvent<{ message: MoiResponseFilter; filter: MoiResponseFilter["filter"]["options"][0] }>) => void;
        /**
          * When product option is clicked
         */
        "onKlevuSelectProductOption"?: (event: KlevuChatMessagesCustomEvent<{ product: MoiProduct; option: MoiProduct["options"][0] }>) => void;
        /**
          * What message should we
         */
        "showFeedbackFor"?: string;
    }
    /**
     * Checkbox component
     * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
     * @cssprop --klevu-checkbox-size 20px Size of the checkbox
     */
    interface KlevuCheckbox {
        /**
          * Is checkbox checked
         */
        "checked"?: boolean;
        /**
          * Is disabled
         */
        "disabled"?: boolean;
        /**
          * Name of the checkbox
         */
        "name"?: string;
        "onKlevuCheckboxChange"?: (event: KlevuCheckboxCustomEvent<boolean>) => void;
    }
    /**
     * Chip component that is used to display selected value in a listing. Gives also ability to remove the chip.
     * Has selected and removable attributes that can be used to display the chip in selected state and also to remove the chip.
     * @cssprop --klevu-chip-radius --klevu-border-radius-xxl Border radius of the chip
     * @cssprop --klevu-chip-border --klevu-color-neutral-5 Border color of the chip
     * @cssprop --klevu-chip-selected-background klevu-color-primary-with-opacity Selected background color of the chip
     * @cssprop --klevu-chip-selected-border --klevu-color-primary Selected border color of the chip
     */
    interface KlevuChip {
        /**
          * Event that is fired when chip is removed
         */
        "onKlevuChipRemove"?: (event: KlevuChipCustomEvent<void>) => void;
        /**
          * Removable state of the chip
         */
        "removable"?: boolean;
        /**
          * Selected state of the chip
         */
        "selected"?: boolean;
    }
    /**
     * Component to display list of CMS page results
     */
    interface KlevuCmsList {
        /**
          * Should use url parameter from link to create anchor
         */
        "link"?: boolean;
        "onKlevuCmsPageClick"?: (event: KlevuCmsListCustomEvent<Partial<KlevuRecord>>) => void;
        /**
          * List of Klevu results records with type of Page
         */
        "pages": Array<Partial<KlevuRecord>>;
        /**
          * Caption of the listing
         */
        "tCaption"?: any;
    }
    /**
     * Color Swatch component
     * @cssprop --klevu-color-swatch-border #8c8c8c Border on swatch
     * @cssprop --klevu-color-swatch-default-background #000 Shown when color not found in css
     * @cssprop --klevu-color-swatch-size 25px Size of swatch
     * @cssprop --klevu-color-swatch-selected-color #2b4af7 Ring color when selected
     * @cssprop --klevu-color-swatch-border-radius 50% To change the shape of swatch
     */
    interface KlevuColorSwatch {
        /**
          * Specify border color for the swatch
         */
        "borderColor"?: string;
        /**
          * Color to apply
         */
        "color"?: string;
        /**
          * ImageUrl to load in swatch
         */
        "imageUrl"?: string;
        /**
          * This field will be sent in the click callback
         */
        "name": string;
        /**
          * When swatch has been clicked
         */
        "onKlevuSwatchClick"?: (event: KlevuColorSwatchCustomEvent<KlevuOnSwatchClick>) => void;
        /**
          * If selected
         */
        "selected": boolean;
    }
    /**
     * Component to create offscreen drawer on left or right side of the screen
     * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
     * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
     * @cssprop --klevu-drawer-width 400px width of drawer
     */
    interface KlevuDrawer {
        /**
          * Anchor to right or left side of the page
         */
        "anchor"?: "right" | "left";
        /**
          * Display dim background on top of other content
         */
        "background"?: boolean;
        /**
          * Close by clicking outside of drawer
         */
        "closeAtOutsideClick"?: boolean;
        /**
          * Add little bit of padding to content of drawer
         */
        "insertYPadding"?: boolean;
        /**
          * Start side drawer open
         */
        "startOpen"?: boolean;
    }
    /**
     * Simple native dropdown component for dropdown
     * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
     * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
     */
    interface KlevuDropdown {
        /**
          * Is element disabled
         */
        "disabled"?: boolean;
        /**
          * Form name
         */
        "name": string;
        /**
          * When dropdown item has been changed
         */
        "onKlevuDropdownChanged"?: (event: KlevuDropdownCustomEvent<string>) => void;
        /**
          * Options to display in dropdown
         */
        "options": Array<{ value: string; text: String }>;
        /**
          * Which element value is selected
         */
        "selected": string;
        /**
          * Variant of dropdown
         */
        "variant"?: KlevuDropdownVariant;
    }
    /**
     * Rendering items of single facet with all its options or a slider.
     * Manager property must be set for this component to work.
     * @csspart facet-heading Heading of the facet
     */
    interface KlevuFacet {
        /**
          * Should the facet be in accordion
         */
        "accordion"?: boolean;
        /**
          * Start accordion open
         */
        "accordionStartOpen"?: boolean;
        /**
          * Specific overrides for individual color swatch. The overrides can be colors (hex or valid css colors) or a valid url to load. ImageUrl takes precedence over color when both are specified.
         */
        "colorSwatchOverrides"?: KlevuColorSwatchOverride;
        /**
          * Set predefined order for options. Unfound values are in original order in end
         */
        "customOrder"?: string[];
        /**
          * Override label text with custom value
         */
        "labelOverride"?: string;
        /**
          * Originating filter manager which to modify. This is the most important property of the component. It will be used to modify the filter state for queries.
         */
        "manager": FilterManager;
        /**
          * Which mode should facets be in
         */
        "mode"?: KlevuFacetMode;
        /**
          * When filter selection is updated
         */
        "onKlevuFilterSelectionUpdate"?: (event: KlevuFacetCustomEvent<KlevuSelectionUpdatedEventDetail>) => void;
        /**
          * From which options to build facet. Single option value from Klevu SDK FilterManager. Either this or slider must be set.
         */
        "option"?: KlevuFilterResultOptions;
        /**
          * From which slider to build facet.
         */
        "slider"?: KlevuFilterResultSlider;
        "tAll"?: any;
        "tMore"?: any;
        /**
          * Converts the color filters to swatches
         */
        "useColorSwatch"?: boolean;
    }
    /**
     * Render all facets of filter manager
     * @cssprop --klevu-face-list-width 200px Width of the facet listing
     */
    interface KlevuFacetList {
        /**
          * Should use accordions to for facets
         */
        "accordion"?: boolean;
        /**
          * Button text for Apply button when using `useApplyButton`
         */
        "applyButtonText"?: string;
        /**
          * Button text for Clear button when using `useApplyButton`
         */
        "clearButtonText"?: string;
        /**
          * Specific overrides for individual color swatch. The overrides can be colors (hex or valid css colors) or a valid url to load. ImageUrl takes precedence over color when both are specified.
         */
        "colorSwatchOverrides"?: {
    [key: string]: KlevuColorSwatchOverride1
  };
        /**
          * Specify which facet keys should be rendered as color swatches
         */
        "colorSwatches"?: string[];
        /**
          * Custom order keys for every facet
         */
        "customOrder"?: { [key: string]: string[] };
        /**
          * Default price label for sliders
         */
        "defaultPriceLabel"?: string;
        /**
          * Filter managet from which the list is built from
         */
        "manager": FilterManager;
        /**
          * Set mode for facets or if object is passed then define per key
         */
        "mode"?: KlevuFacetMode1 | { [key: string]: KlevuFacetMode1 };
        /**
          * When filters are applied
         */
        "onKlevuApplyFilters"?: (event: KlevuFacetListCustomEvent<KlevuFiltersAppliedEventDetail>) => void;
        /**
          * Display "apply filters" button in the end. And do not apply filters until this button is pressed
         */
        "useApplyButton"?: boolean;
    }
    /**
     * Klevu icon component. Uses Google Material Icons.
     */
    interface KlevuIcon {
        /**
          * Name of the icon. Please use tokens of material icons
         */
        "name": string;
    }
    /**
     * This component allows you to select an image from the file system.
     */
    interface KlevuImagePicker {
        /**
          * To be used to display loading indicator
         */
        "isLoading"?: boolean;
        /**
          * Provide max file size in MBs
         */
        "maxFileSize"?: number;
        /**
          * This event is fired when an image is selected.
         */
        "onKlevuImageSelected"?: (event: KlevuImagePickerCustomEvent<KlevuImageSelectedEvent>) => void;
    }
    /**
     * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
     * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
     * configuration for all components on the page and provide few global settings for all components:
     * - **onItemClick:** what happens when product is clicked. Typically this places default action of
     *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
     *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
     *   link following.
     * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
     *   is not used this can be used for it. Has product as attribute.
     * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
     *   rendering then this is the place. Has two attribute amount and currency of item.
     * Initializes components to fetch data from correct Klevu backend
     * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
     * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
     * @cssprop --klevu-color-primary #2b4af7 The primary color
     * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
     * @cssprop --klevu-color-positive #2e9c40 Positive color
     * @cssprop --klevu-color-negative #ad2d2d Negative color
     * @cssprop --klevu-color-neutral-1 #ffffff Background color
     * @cssprop --klevu-color-neutral-2 #f6f6f6
     * @cssprop --klevu-color-neutral-3 #ededed
     * @cssprop --klevu-color-neutral-4 #e3e3e3
     * @cssprop --klevu-color-neutral-5 #d6d6d6
     * @cssprop --klevu-color-neutral-6 #919191
     * @cssprop --klevu-color-neutral-7 #757575
     * @cssprop --klevu-color-neutral-8 #191919 Text color
     * @cssprop --klevu-color-accent-1 #8eedd3 Accent color
     * @cssprop --klevu-color-accent-2 #ffcb9f Accent color
     * @cssprop --klevu-color-accent-3 #ffb8d6 Accent color
     * @cssprop --klevu-color-accent-4 #c3d7ff Accent color
     * @cssprop --klevu-spacing-01 1px Spacing 01
     * @cssprop --klevu-spacing-02 4px Spacing 02
     * @cssprop --klevu-spacing-03 8px Spacing 03
     * @cssprop --klevu-spacing-04 12px Spacing 04
     * @cssprop --klevu-spacing-05 16px Spacing 05
     * @cssprop --klevu-spacing-06 24px Spacing 06
     * @cssprop --klevu-spacing-07 32px Spacing 07
     * @cssprop --klevu-spacing-08 40px Spacing 08
     * @cssprop --klevu-spacing-09 48px Spacing 09
     * @cssprop --klevu-spacing-10 64px Spacing 10
     */
    interface KlevuInit {
        /**
          * Read only API key to Klevu
         */
        "apiKey": string;
        "kmcLoadDefaults"?: boolean;
        /**
          * Which language to load
         */
        "language"?: Translations;
        /**
          * Global settings
         */
        "settings"?: KlevuUIGlobalSettings;
        /**
          * Provide your own translations
         */
        "translation"?: Translation;
        /**
          * Override the default translation URL prefix. Will use format of `${translationUrlPrefix}/translations/${lang}.json`
         */
        "translationUrlPrefix"?: string;
        /**
          * Klevu Server URL
         */
        "url": string;
    }
    /**
     * Lists latest searches user has made on the site
     */
    interface KlevuLatestSearches {
        /**
          * Event that is emitted when a popular search is clicked
         */
        "onKlevuLastSearchClicked"?: (event: KlevuLatestSearchesCustomEvent<string>) => void;
        /**
          * Caption of the list
         */
        "tCaption"?: any;
    }
    /**
     * Generic layout used in merchansiding and search landing page
     */
    interface KlevuLayoutResults {
        "onKlevuDrawerOpened"?: (event: KlevuLayoutResultsCustomEvent<void>) => void;
    }
    /**
     * Single list item for listing things.
     */
    interface KlevuList {
        /**
          * Condensed version of the list item.
         */
        "condensed"?: boolean;
        /**
          * Icon to be displayed in the list item. Cannot be used with image.
         */
        "icon"?: string;
        /**
          * Image to be displayed in the list item. Cannot be used with icon.
         */
        "image"?: string;
        "noXPadding"?: boolean;
        /**
          * Make the whole thing clickable and navigate to this url.
         */
        "url"?: string;
    }
    /**
     * Simple loading indicator
     * @cssprop --klevu-loading-indicator-color --klevu-color-primary Color of the loading indicator
     */
    interface KlevuLoadingIndicator {
    }
    /**
     * Full merchandising app to power up your product grid pages
     */
    interface KlevuMerchandising {
        /**
          * Which category products
         */
        "category": string;
        /**
          * Category title
         */
        "categoryTitle": string;
        /**
          * How many filters per facet to show
         */
        "filterCount"?: number;
        /**
          * Order filters in given order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Count of products for page
         */
        "limit"?: number;
        "onKlevuData"?: (event: KlevuMerchandisingCustomEvent<{ resultObject: KlevuResponseQueryObject; records: KlevuRecord[]; manager: FilterManager }>) => void;
        /**
          * Object to override and settings on search options
         */
        "options"?: KlevuMerchandisingOptions;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Order of results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Pass custom options for the sort dropdown
         */
        "sortOptions"?: Array<{ value: KlevuSearchSorting; text: string }>;
        /**
          * Text for load more button
         */
        "tLoadMore"?: any;
        /**
          * Overrides KMC setting to use ABtest for results
         */
        "useABTest"?: boolean;
        /**
          * Should use infinite scroll component to trigger load next
         */
        "useInfiniteScroll"?: boolean;
        /**
          * Should display pagination instead of load next
         */
        "usePagination"?: boolean;
        /**
          * Enable personalisation
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Stylized modal dialog.
     */
    interface KlevuModal {
        /**
          * Emitted when the modal is closed.
         */
        "onKlevuCloseModal"?: (event: KlevuModalCustomEvent<void>) => void;
        /**
          * Should show the modal on load.
         */
        "startOpen"?: boolean;
    }
    /**
     * Klevu MOI Application
     */
    interface KlevuMoi {
        /**
          * Override default API key
         */
        "apiKey"?: string;
        /**
          * When a product is clicked. By default does a full page redirect to product url if event is not cancelled.  Use `event.preventDefault()` to cancel the redirect.
          * @param product
         */
        "onKlevuMoiProductClick"?: (event: KlevuMoiCustomEvent<MoiProduct>) => void;
        /**
          * When the visibility of Moi window changes
         */
        "onKlevuMoiVisibilityChange"?: (event: KlevuMoiCustomEvent<"open" | "close">) => void;
        /**
          * Start the MOI window open
         */
        "startOpen"?: boolean;
    }
    /**
     * Pagination component. Either provide numbers or query result to display the component.
     * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
     * @cssprop --klevu-pagination-text-color - text color of item
     * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
     * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
     */
    interface KlevuPagination {
        /**
          * Current page
         */
        "current"?: number;
        /**
          * Max page
         */
        "max"?: number;
        /**
          * Min page
         */
        "min"?: number;
        /**
          * Page that was changed into
         */
        "onKlevuPaginationChange"?: (event: KlevuPaginationCustomEvent<number>) => void;
        /**
          * Query results used to build min, max and current
         */
        "queryResult"?: KlevuQueryResult;
    }
    /**
     * Fetches and displays most popular searches from Klevu Merchant center
     */
    interface KlevuPopularSearches {
        /**
          * Event that is emitted when a popular search is clicked
         */
        "onKlevuPopularSearchClicked"?: (event: KlevuPopularSearchesCustomEvent<string>) => void;
        /**
          * Caption of the list
         */
        "tCaption"?: any;
    }
    /**
     * Popup component where clicking origin component popups the the content
     * @csspart popup-origin Origin component
     * @csspart popup-content Content component
     */
    interface KlevuPopup {
        /**
          * Anchor popup to left or right of page
         */
        "anchor"?: Placement;
        /**
          * Close popup when clicking outside content area
         */
        "closeAtOutsideClick"?: boolean;
        /**
          * Elevation of the popup. 0-3.
         */
        "elevation"?: number;
        /**
          * Expand popup to full size of the screen when popup is smaller that requested width
         */
        "fullscreenOnMobileSize"?: boolean;
        /**
          * How many pixels to offset the popup from origin
         */
        "offset"?: number;
        "onKlevuPopupClose"?: (event: KlevuPopupCustomEvent<void>) => void;
        /**
          * When popup is opened this event is emitted
         */
        "onKlevuPopupOpen"?: (event: KlevuPopupCustomEvent<void>) => void;
        /**
          * Open content when origin component is focused
         */
        "openAtFocus"?: boolean;
        /**
          * Element to anchor popup to. If not set popup is anchored to origin slot
         */
        "originElement"?: HTMLElement;
        /**
          * Set width of the popup content
         */
        "popupWidth"?: number;
        /**
          * Initially show the popup
         */
        "startOpen"?: boolean;
        /**
          * Clicking origin again will close the popup
         */
        "toggle"?: boolean;
        /**
          * Darken background when popup is open
         */
        "useBackground"?: boolean;
    }
    /**
     * Generic product component that renders product based on KlevuRecord of klevu/core
     * All parts of the component can be replaced with slots.
     * By default the products fill the whole space, but it can be limited
     * with --klevu-product-width and --klevu-product-small-width css variables.
     * @csspart product-image The image element of component
     * @csspart product-container The container element of whole
     * @csspart product-swatch Single swatch element under the image
     * @cssprop --klevu-product-width - Width of the product
     * @cssprop --klevu-product-small-width - Width of the product when small variant is used
     * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
     * @cssprop --klevu-product-image-fill - How to fill image to it's space.
     * @cssprop --klevu-product-border none Border style of the product
     */
    interface KlevuProduct {
        /**
          * Fallback image url to be used when the product image fails to load.
         */
        "fallbackProductImageUrl"?: string;
        /**
          * Force certain width for product. Do not use max-width
         */
        "fixedWidth"?: boolean;
        /**
          * Hides brand information
         */
        "hideBrand"?: boolean;
        /**
          * Hides description from info
         */
        "hideDescription"?: boolean;
        /**
          * When mousing over product, show hover image if available
         */
        "hideHoverImage"?: boolean;
        /**
          * Hides image
         */
        "hideImage"?: boolean;
        /**
          * Hides name from info
         */
        "hideName"?: boolean;
        /**
          * Hides price from info
         */
        "hidePrice"?: boolean;
        /**
          * Do not show swatches in products
         */
        "hideSwatches"?: boolean;
        /**
          * Turns the component into a product wrapper that handles events automatically. It assumes that whole product is clickable.  Component has only one main slot that can contain any content.  To prevent product clicking use `event.stopPropagation()` in your events.  Component still requires the product parameter as it's data is used send correct data to Klevu analytics
         */
        "isWrapper"?: boolean;
        /**
          * What key to use for brand value
         */
        "keyBrand"?: string;
        /**
          * What key to use for description value
         */
        "keyDescription"?: string;
        /**
          * What key to use for name value
         */
        "keyName"?: string;
        /**
          * When products has been clicked
         */
        "onKlevuProductClick"?: (event: KlevuProductCustomEvent<KlevuProductOnProductClick>) => void;
        /**
          * Caption to show if product is out of stock
         */
        "outOfStockCaption"?: string;
        /**
          * Product data
         */
        "product"?: Partial<KlevuRecord>;
        /**
          * Show add to cart button
         */
        "showAddToCart"?: boolean;
        /**
          * To show the product code next to product name.
         */
        "showProductCode"?: boolean;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings
         */
        "showRatingsCount"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount"?: boolean;
        /**
          * Text for add to cart button
         */
        "tAddToCart"?: string;
        /**
          * What variant of product to render
         */
        "variant"?: KlevuProductVariant;
        /**
          * Text to be added after the price. Usually used to indicate that does the price include VAT or not.
         */
        "vatCaption"?: string;
    }
    /**
     * Component to place products on grid. Very simple container for products.
     * @cssprop --klevu-product-grid-spacing --klevu-spacing-05 spacing between grid items;
     */
    interface KlevuProductGrid {
        /**
          * Force to place products in grid with given number of columns.
         */
        "itemsPerRow"?: number;
    }
    /**
     * Button that is placed on the site to start a product query session
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart product-query-button-icon Icon of the button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     * @csspart button-base The button element
     */
    interface KlevuProductQuery {
        /**
          * Text of the button for asking a question
         */
        "askButtonText"?: string;
        /**
          * Text of the button to open the popup
         */
        "buttonText"?: string;
        /**
          * Disable closing the popup when clicking outside of it
         */
        "disableCloseOutsideClick"?: boolean;
        /**
          * Fine print of the popup under the title
         */
        "finePrint"?: string;
        /**
          * Anchor popup to which side of the origin
         */
        "popupAnchor"?: Placement;
        /**
          * How many pixels to offset the popup from origin
         */
        "popupOffset"?: number;
        /**
          * Title of the popup
         */
        "popupTitle"?: string;
        /**
          * Instead of Klevu API-key use a widget id to start a session
         */
        "pqaWidgetId"?: string;
        /**
          * Alternative to url, productId can be used to start a session
         */
        "productId"?: string;
        /**
          * Settings for requests to Klevu. Deeper modification on how the product query works.
         */
        "settings"?: MoiRequest["klevuSettings"];
        /**
          * Placeholder of the textfield
         */
        "textFieldPlaceholder"?: string;
        /**
          * Variant of the textfield how does it look like
         */
        "textFieldVariant"?: KlevuTextfieldVariant;
        /**
          * Url of the page where the product is
         */
        "url"?: string;
        /**
          * Use dark background with the popup
         */
        "useBackground"?: boolean;
        /**
          * Use native scrollbars instead of custom ones
         */
        "useNativeScrollbars"?: boolean;
    }
    /**
     * Klevu Product Query popup application that shows a popup for asking questions about a product
     * @csspart product-query-header Header of the popup
     * @csspart product-query-footer Footer of the popup where input is
     * @csspart product-query-feedback Feedback section of the popup when it is being closed
     * @csspart product-query-open-button Button that opens the popup
     * @csspart popup-origin Popup origin element
     * @csspart popup-content Popup content element
     */
    interface KlevuProductQueryPopup {
        /**
          * Text of the button for asking a question
         */
        "askButtonText"?: string;
        /**
          * Config for Klevu
         */
        "config"?: KlevuConfig;
        /**
          * Disable closing the popup when clicking outside of it
         */
        "disableCloseOutsideClick"?: boolean;
        /**
          * Element to anchor the product query popup to
         */
        "originElement"?: HTMLElement;
        /**
          * Anchor popup to which side of the origin
         */
        "popupAnchor"?: Placement;
        /**
          * How many pixels to offset the popup from origin
         */
        "popupOffset"?: number;
        /**
          * Instead of Klevu API-key use a widget id to start a session
         */
        "pqaWidgetId"?: string;
        /**
          * Alternative to url, productId can be used to start a session
         */
        "productId"?: string;
        /**
          * Settings for requests to Klevu. Deeper modification on how the product query works.
         */
        "settings"?: MoiRequest["klevuSettings"];
        /**
          * Text of the button to open the popup
         */
        "tButtonText"?: any;
        /**
          * Data protection notice when user registering is enabled
         */
        "tDataProtectionNotice"?: any;
        /**
          * Fine print of the popup under the title
         */
        "tFinePrint"?: any;
        /**
          * When loading takes a bit longer, show this text
         */
        "tLoadingSorry"?: any;
        /**
          * Title of the popup
         */
        "tPopupTitle"?: any;
        /**
          * Description of the feedback section when closing the popup
         */
        "tRateExperienceText"?: any;
        /**
          * Title of the feedback section when closing the popup
         */
        "tRateExperienceTitle"?: any;
        /**
          * Placeholder of the textfield
         */
        "tTextFieldPlaceholder"?: any;
        /**
          * Variant of the textfield how does it look like
         */
        "textFieldVariant"?: KlevuTextfieldVariant;
        /**
          * Url of the page where the product is
         */
        "url"?: string;
        /**
          * Use dark background with the popup
         */
        "useBackground"?: boolean;
        /**
          * Use native scrollbars instead of custom ones
         */
        "useNativeScrollbars"?: boolean;
    }
    /**
     * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
     * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
     * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
     * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
     * cards. Whole content of __klevu-product__ can be replaced with your content.
     */
    interface KlevuQuery {
        /**
          * Which category to do merchandising. Required for "merchandising" type
         */
        "category"?: string;
        /**
          * Which category title to have on page. Required for "merchandising" type
         */
        "categoryTitle"?: string;
        /**
          * By default component will fetch results on init or on property change. This can be disabled with this prop.
         */
        "disableInitialFetch"?: boolean;
        /**
          * To how many filters limit results to
         */
        "filterCount"?: number;
        /**
          * Fetch filters on the request
         */
        "filterGet"?: boolean;
        /**
          * Should get price filters
         */
        "filterWithPrices"?: boolean;
        /**
          * What's the limit on page
         */
        "limit"?: number;
        /**
          * @klevu /core FilterManager used for filters. If none is set, new one is created
         */
        "manager"?: FilterManager;
        /**
          * Offset of results
         */
        "offset"?: number;
        "onKlevuQueryResult"?: (event: KlevuQueryCustomEvent<{
    result: KlevuQueryResult
    suggestions?: KlevuSuggestionResult
    manager: FilterManager
  }>) => void;
        /**
          * Object to override and settings on search options
         */
        "options"?: AllQueryOptions;
        /**
          * Override default modifiers. This will disable default modifiers and ones set by filter props
         */
        "overrideModifiers"?: KlevuFetchModifer[];
        /**
          * Which products are in cart. Required for some recommendation types
         */
        "recommendationCartProductIds"?: string[];
        /**
          * Which category path to use for recommendation. Required for some recommendation types
         */
        "recommendationCategoryPath"?: string;
        /**
          * Which product is currently being viewed. Required for some recommendation types
         */
        "recommendationCurrentProductId"?: string;
        /**
          * Which recommendation to fetch from Klevu Merchant Center. Required for "recommendation" type
         */
        "recommendationId"?: string;
        /**
          * What is the item group id of the product being viewed. Required for some recommendation types
         */
        "recommendationItemGroupId"?: string;
        /**
          * When searching should search suggestions be fetched
         */
        "searchSuggestions"?: boolean;
        /**
          * What to search. Required for "search" type.
         */
        "searchTerm"?: string;
        /**
          * Should search view event be sent. View event is important for analytical cases. In case of a search this should be used only when creating a landing page for search.
         */
        "sendSearchViewEvent"?: boolean;
        /**
          * How to sort
         */
        "sort"?: KlevuSearchSorting;
        /**
          * What kind of query
         */
        "type": "search" | "merchandising" | "recommendation";
        /**
          * Should component listen to changes to filters
         */
        "updateOnFilterChange"?: boolean;
    }
    /**
     * Full app to create search bar that popups trending products and search results.
     */
    interface KlevuQuicksearch {
        /**
          * Enable Klevu MOI chat
         */
        "enableChat"?: boolean;
        /**
          * Enable image search feature
         */
        "enableImageSearch"?: boolean;
        /**
          * What term should be used if there isn't enough results
         */
        "fallbackTerm"?: string;
        /**
          * How many products to show in full variant
         */
        "fullResultCount"?: number;
        /**
          * Hide popular keywords on no results page
         */
        "hidePopularKeywordsOnNoResultsPage"?: boolean;
        /**
          * Hide popular keywords
         */
        "hidePopularSearches"?: boolean;
        /**
          * Hide recent searches
         */
        "hideRecentSearches"?: boolean;
        /**
          * Hide recently viewed products
         */
        "hideRecentlyViewedProducts"?: boolean;
        /**
          * Hide trending products
         */
        "hideTrendingProducts"?: boolean;
        /**
          * HHide trending products on no results page
         */
        "hideTrendingProductsOnNoResultsPage"?: boolean;
        /**
          * When the data in the component changes. This event can be used to replace whole rendering of products when used with slots properly.
         */
        "onKlevuData"?: (event: KlevuQuicksearchCustomEvent<KlevuQuicksearchDataEvent>) => void;
        /**
          * This event is emitted once the image to be used for search is uploaded. The event contains the url to be passed to search api.
         */
        "onKlevuImageSearch"?: (event: KlevuQuicksearchCustomEvent<string>) => void;
        /**
          * Will be emitted when there is a url match for redirects. You can override the default behaviour of redirects by preventing default of this event
         */
        "onKlevuRedirect"?: (event: KlevuQuicksearchCustomEvent<KMCMapsRootObject["klevu_keywordUrlMap"][0]>) => void;
        /**
          * When user clicks search button. Returns the search term. This event is emitted when there is no url matched for redirects
         */
        "onKlevuSearch"?: (event: KlevuQuicksearchCustomEvent<string>) => void;
        /**
          * Placeholder for input text
         */
        "placeholder"?: string;
        /**
          * How many products to show in Popular products section
         */
        "popularProductsCount"?: number;
        /**
          * Anchor popup to witch side
         */
        "popupAnchor"?: Placement;
        /**
          * Change variant of the search results
         */
        "resultVariant"?: KlevuQuicksearchResultVarint;
        /**
          * Should component search for categories too
         */
        "searchCategories"?: boolean;
        /**
          * Should component search for CMS pages too
         */
        "searchCmsPages"?: boolean;
        /**
          * Change variant of the search field
         */
        "searchFieldVariant"?: SearchFieldVariant;
        /**
          * Text of search button
         */
        "searchText"?: string;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount"?: boolean;
        /**
          * How many products to show in simple variant
         */
        "simpleResultCount"?: number;
        /**
          * Title of categories section
         */
        "tCategoriesCaption"?: any;
        /**
          * Recently clicked tab caption Supports showing the count in place of %s in the value eg: `Recently Searched (%s)` with count of 2 will lead to `Recently Searched (2)`.
         */
        "tLastClickedProductsCaption"?: string;
        /**
          * Popular products section heading
         */
        "tPopularProductsTitle"?: string;
        /**
          * Popular products section heading shown on no results page
         */
        "tPopularProductsTitleOnNoResultsPage"?: string;
        /**
          * Title of search results
         */
        "tSearchResults"?: any;
        /**
          * Title of button to start Moi session
         */
        "tStartChat"?: any;
        /**
          * Trending tab caption Supports showing the count in place of %s in the value eg: `Trending (%s)` with count of 2 will lead to `Trending (2)`.
         */
        "tTrendingCaption"?: string;
        /**
          * Pass your own redirect urls for a keyword
         */
        "urlRedirects"?: KMCMapsRootObject["klevu_keywordUrlMap"];
        /**
          * Enables Klaviyo click tracking
         */
        "useKlaviyo"?: boolean;
        /**
          * Enable personalisation
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Klevu ratings component
     * @prop rating - The rating value as a number to show
     * @prop ratingRange - The number of stars to show
     */
    interface KlevuRating {
        /**
          * Rating value
         */
        "rating"?: number;
        /**
          * Number of stars to show
         */
        "ratingRange"?: number;
    }
    /**
     * Full recommendation banner solution
     */
    interface KlevuRecommendations {
        /**
          * For cart recommendation you need to provide product id's in cart
         */
        "cartProductIds"?: string[];
        /**
          * For category product recommendation you need to provide categery path
         */
        "categoryPath"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "currentProductId"?: string;
        /**
          * For similiar products recommendation you need to provide productId and itemGroupId
         */
        "itemGroupId"?: string;
        /**
          * When Recommndations data is available or updated
         */
        "onKlevuData"?: (event: KlevuRecommendationsCustomEvent<KlevuResponseQueryObject>) => void;
        /**
          * The ID of the recommendation
         */
        "recommendationId": string;
        /**
          * Title of the recommendation
         */
        "recommendationTitle"?: string;
    }
    /**
     * Plain textfield that does the searching. It queries Klevu and returns the results
     * in a custom event. Then you can decide what to do with the results.
     */
    interface KlevuSearchField {
        /**
          * Fallback term to use if there are no results
         */
        "fallbackTerm"?: string;
        /**
          * Maximum amount of results
         */
        "limit"?: number;
        /**
          * When user clicks search button. Returns the search term.
         */
        "onKlevuSearchClick"?: (event: KlevuSearchFieldCustomEvent<string>) => void;
        /**
          * When results come from after typing in the search field. This is debounced to avoid excessive requests.
         */
        "onKlevuSearchResults"?: (event: KlevuSearchFieldCustomEvent<SearchResultsEventData>) => void;
        /**
          * When searchfield gives some suggestions
         */
        "onKlevuSearchSuggestions"?: (event: KlevuSearchFieldCustomEvent<SuggestionsEventData>) => void;
        /**
          * Should try to find categories as well
         */
        "searchCategories"?: boolean;
        /**
          * Should try to find cms pages as well
         */
        "searchCmsPages"?: boolean;
        /**
          * Should search products
         */
        "searchProducts"?: boolean;
        /**
          * Should search suggestions
         */
        "searchSuggestions"?: boolean;
        /**
          * Sends analytics when making query
         */
        "sendAnalytics"?: boolean;
        /**
          * In case you want to sort the results
         */
        "sort"?: KlevuSearchSorting;
        /**
          * The placeholder text to display in the search field.
         */
        "tPlaceholder"?: any;
        /**
          * Button text
         */
        "tSearchText"?: any;
        /**
          * Enable Klaviyo integration for search terms and clicks
         */
        "useKlaviyo"?: boolean;
        /**
          * Enable personalisation on the query
         */
        "usePersonalisation"?: boolean;
        /**
          * Variant of the search field
         */
        "variant"?: SearchFieldVariant1;
    }
    /**
     * Full app component for search landing page
     */
    interface KlevuSearchLandingPage {
        /**
          * How many products to display in filters
         */
        "filterCount"?: number;
        /**
          * Order filters in a customer order
         */
        "filterCustomOrder"?: { [key: string]: string[] };
        /**
          * Hide filters on results page
         */
        "hideFilters"?: boolean;
        /**
          * Hides price from search results
         */
        "hidePrice"?: boolean;
        /**
          * Pass image url if performing image search
         */
        "imageUrlForSearch"?: string;
        /**
          * How many results to display on a page
         */
        "limit"?: number;
        "onKlevuData"?: (event: KlevuSearchLandingPageCustomEvent<{ resultObject: KlevuResponseQueryObject; records: KlevuRecord[]; manager: FilterManager }>) => void;
        /**
          * How many products to show in popular products
         */
        "popularProductsResultCount"?: number;
        /**
          * The factor to use to generate the ranges
         */
        "priceInterval"?: number;
        /**
          * Show price as options
         */
        "showPriceAsSlider"?: boolean;
        /**
          * Show ratings
         */
        "showRatings"?: boolean;
        /**
          * Show ratings count
         */
        "showRatingsCount"?: boolean;
        /**
          * Show the quick search box at the top of the page
         */
        "showSearch"?: boolean;
        /**
          * Show variants count
         */
        "showVariantsCount"?: boolean;
        /**
          * In which order to set the products
         */
        "sort"?: KlevuSearchSorting;
        /**
          * Text of load more button
         */
        "tLoadMore"?: any;
        /**
          * The title of the page
         */
        "tSearchTitle"?: any;
        /**
          * What term was used for search
         */
        "term": string;
        /**
          * Should use infinite scroll component to trigger load next
         */
        "useInfiniteScroll"?: boolean;
        /**
          * Enable Klaviyo integration
         */
        "useKlaviyo"?: boolean;
        /**
          * Specify whether to show checkboxes or radio buttons for filters
         */
        "useMultiSelectFilters"?: boolean;
        /**
          * Use pagination instead of loading more
         */
        "usePagination"?: boolean;
        /**
          * Enable personalization
         */
        "usePersonalisation"?: boolean;
    }
    /**
     * Horizontal slider component. By default used for price range in this package. But can
     * be used for other purposes as well.
     */
    interface KlevuSlider {
        /**
          * Current end value of the range
         */
        "end"?: number;
        /**
          * Format tooltip value with function
         */
        "formatTooltip"?: (value: number) => string;
        /**
          * Max value of the range
         */
        "max": number;
        /**
          * Min value of the range
         */
        "min": number;
        /**
          * When values change
         */
        "onKlevuSliderChange"?: (event: KlevuSliderCustomEvent<[number, number]>) => void;
        /**
          * Show tooltips on top of slider
         */
        "showTooltips"?: boolean;
        /**
          * Current start value of the range
         */
        "start"?: number;
    }
    /**
     * Horizontal slides component. Can be used to display a list of items horizontally. Has optional title and next/prev buttons.
     * @cssprop --klevu-slides-item-width - Force a width for each item in the slides
     */
    interface KlevuSlides {
        /**
          * Heading for the slides component
         */
        "heading"?: string;
        /**
          * Hides next and previous buttons
         */
        "hideNextPrev"?: boolean;
        /**
          * When clicking next/prev buttons should scroll full width of container
         */
        "slideFullWidth"?: boolean;
    }
    /**
     * Sort dropdown. User can select what kind of sorting they want
     */
    interface KlevuSort {
        /**
          * When the sorting changes
         */
        "onKlevuSortChanged"?: (event: KlevuSortCustomEvent<KlevuSearchSorting>) => void;
        /**
          * Pass custom options for the sort dropdown
         */
        "options"?: Array<{ value: KlevuSearchSorting; text: string }>;
        /**
          * Dropdown variant
         */
        "variant"?: KlevuDropdownVariant1;
    }
    /**
     * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
     */
    interface KlevuSuggestionsList {
        /**
          * Caption on the list
         */
        "caption"?: string;
        /**
          * Event that is emitted when a suggestion is clicked
         */
        "onKlevuSuggestionClicked"?: (event: KlevuSuggestionsListCustomEvent<string>) => void;
        /**
          * Suggestions to render in list
         */
        "suggestions"?: string[];
    }
    /**
     * Very simple tab component. Use like a button, but with a caption.
     * Use standard onClick event to handle click.
     */
    interface KlevuTab {
        /**
          * Whether the tab is active
         */
        "active"?: boolean;
        /**
          * Title of the tab
         */
        "caption": string;
        /**
          * Whether the tab is disabled
         */
        "disabled"?: boolean;
    }
    /**
     * Branded text field component
     */
    interface KlevuTextfield {
        /**
          * Display a button to clear field value on the right side of the field
         */
        "clearButton"?: boolean;
        /**
          * Is field disabled
         */
        "disabled"?: boolean;
        /**
          * Is field in error state
         */
        "error"?: boolean;
        /**
          * Icon to display in textfield start of the field. Please use tokens of material icons
         */
        "icon"?: string;
        /**
          * When text changes in field
         */
        "onKlevuTextChanged"?: (event: KlevuTextfieldCustomEvent<string>) => void;
        /**
          * When enter is pressed in textfield
         */
        "onKlevuTextEnterPressed"?: (event: KlevuTextfieldCustomEvent<void>) => void;
        /**
          * When textfield is focused
         */
        "onKlevuTextFocused"?: (event: KlevuTextfieldCustomEvent<void>) => void;
        /**
          * Placeholder value of the field
         */
        "placeholder"?: string;
        /**
          * Current value of the field
         */
        "value": string;
        /**
          * Variant of textfield
         */
        "variant"?: KlevuTextfieldVariant1;
    }
    /**
     * Klevu typography component. This component is used in most places to set correct font in component pieces.
     * @cssprop --klevu-typography-color - Color of the text that overrides the default
     * @cssprop --klevu-typography-font-weight - Font weight that overrides the default
     * @cssprop --klevu-h1-size 24px H1 size
     * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
     * @cssprop --klevu-h1-weight 700 H1 weight
     * @cssprop --klevu-h2-size 20px H2 size
     * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
     * @cssprop --klevu-h2-weight 700 H2 weight
     * @cssprop --klevu-h3-size 16px H3 size
     * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
     * @cssprop --klevu-h3-weight 700 H3 weight
     * @cssprop --klevu-h4-size 14px H4 size
     * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
     * @cssprop --klevu-h4-weight 700 H4 weight
     * @cssprop --klevu-body-l-size 20px Body large size
     * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
     * @cssprop --klevu-body-m-size 16px Body medium size
     * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
     * @cssprop --klevu-body-s-size 14px  Body small size
     * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
     * @cssprop --klevu-body-xs-size 12px Body extra small size
     * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
     */
    interface KlevuTypography {
        /**
          * Display the text in full width. Usefull when typography needs to be used as a block element.
         */
        "fullWidth"?: boolean;
        /**
          * Variant of heading
         */
        "variant": KlevuTypographyVariant;
    }
    /**
     * Utility compoenent that simplifies listening Klevu SDK Dom events
     * https://docs.klevu.com/headless-sdk/events-analytics#dhk6Y
     */
    interface KlevuUtilDomEvents {
        "onKlevuClickEventSent"?: (event: KlevuUtilDomEventsCustomEvent<{
    productId: string
    product?: Partial<KlevuRecord>
  }>) => void;
        "onKlevuFilterSelectionUpdate"?: (event: KlevuUtilDomEventsCustomEvent<{
    key: string
    name: string
    selected: boolean
  }>) => void;
        "onKlevuFiltersApplied"?: (event: KlevuUtilDomEventsCustomEvent<{
    filters: FilterManagerFilters[]
  }>) => void;
        "onKlevuLastSearchUpdate"?: (event: KlevuUtilDomEventsCustomEvent<void>) => void;
    }
    /**
     * Component that triggers event when intercepted on scroll of page.
     */
    interface KlevuUtilInfiniteScroll {
        /**
          * Whether infinite scrolling is enabled
         */
        "enabled"?: boolean;
        /**
          * The number of pages after which triggers infiniteScrollingPaused event. Listen to this event to allow further loading on user input.
         */
        "infiniteScrollPauseThreshold"?: number;
        /**
          * Event emitted when infinite loading reaches a multiple of infiniteScrollPauseThreshold
         */
        "onKlevuInfiniteScrollingPaused"?: (event: KlevuUtilInfiniteScrollCustomEvent<void>) => void;
        /**
          * Event emitted when infinite scroll element is intercepted
         */
        "onKlevuLoadMore"?: (event: KlevuUtilInfiniteScrollCustomEvent<void>) => void;
    }
    /**
     * Portal component to move content to end of body instead of normal DOM position. Typically used for popups
     * to prevent problems with CSS stylings.
     * Does not move styles, so create a child component that has styles defined in shadow DOM.
     */
    interface KlevuUtilPortal {
    }
    /**
     * Utility that replaces the default browser scrollbar with a custom one.
     * @cssprop --klevu-util-scrollbar-handle-bg --klevu-color-neutral-5 The background color of the scrollbar handle.
     * @cssprop --klevu-util-scrollbar-handle-bg-hover --klevu-color-neutral-6 The background color of the scrollbar handle when hovered.
     * @cssprop --klevu-util-scrollbar-handle-bg-active --klevu-color-neutral-7 The background color of the scrollbar handle when active.
     */
    interface KlevuUtilScrollbars {
        /**
          * The overflow behavior of the horizontal scrollbar.
         */
        "overflowX"?: OverflowBehavior;
        /**
          * The overflow behavior of the vertical scrollbar.
         */
        "overflowY"?: OverflowBehavior;
        /**
          * Disables the custom scrollbar and use native scrollbars instead.
         */
        "useNative"?: boolean;
    }
    interface KlevuUtilViewport {
        "onKlevuSizeChanged"?: (event: KlevuUtilViewportCustomEvent<ViewportSize>) => void;
        /**
          * List of sizes to listen for
         */
        "sizes"?: ViewportSize[];
    }
    interface IntrinsicElements {
        "klevu-accordion": KlevuAccordion;
        "klevu-badge": KlevuBadge;
        "klevu-banner": KlevuBanner;
        "klevu-button": KlevuButton;
        "klevu-chat-bubble": KlevuChatBubble;
        "klevu-chat-layout": KlevuChatLayout;
        "klevu-chat-messages": KlevuChatMessages;
        "klevu-checkbox": KlevuCheckbox;
        "klevu-chip": KlevuChip;
        "klevu-cms-list": KlevuCmsList;
        "klevu-color-swatch": KlevuColorSwatch;
        "klevu-drawer": KlevuDrawer;
        "klevu-dropdown": KlevuDropdown;
        "klevu-facet": KlevuFacet;
        "klevu-facet-list": KlevuFacetList;
        "klevu-icon": KlevuIcon;
        "klevu-image-picker": KlevuImagePicker;
        "klevu-init": KlevuInit;
        "klevu-latest-searches": KlevuLatestSearches;
        "klevu-layout-results": KlevuLayoutResults;
        "klevu-list": KlevuList;
        "klevu-loading-indicator": KlevuLoadingIndicator;
        "klevu-merchandising": KlevuMerchandising;
        "klevu-modal": KlevuModal;
        "klevu-moi": KlevuMoi;
        "klevu-pagination": KlevuPagination;
        "klevu-popular-searches": KlevuPopularSearches;
        "klevu-popup": KlevuPopup;
        "klevu-product": KlevuProduct;
        "klevu-product-grid": KlevuProductGrid;
        "klevu-product-query": KlevuProductQuery;
        "klevu-product-query-popup": KlevuProductQueryPopup;
        "klevu-query": KlevuQuery;
        "klevu-quicksearch": KlevuQuicksearch;
        "klevu-rating": KlevuRating;
        "klevu-recommendations": KlevuRecommendations;
        "klevu-search-field": KlevuSearchField;
        "klevu-search-landing-page": KlevuSearchLandingPage;
        "klevu-slider": KlevuSlider;
        "klevu-slides": KlevuSlides;
        "klevu-sort": KlevuSort;
        "klevu-suggestions-list": KlevuSuggestionsList;
        "klevu-tab": KlevuTab;
        "klevu-textfield": KlevuTextfield;
        "klevu-typography": KlevuTypography;
        "klevu-util-dom-events": KlevuUtilDomEvents;
        "klevu-util-infinite-scroll": KlevuUtilInfiniteScroll;
        "klevu-util-portal": KlevuUtilPortal;
        "klevu-util-scrollbars": KlevuUtilScrollbars;
        "klevu-util-viewport": KlevuUtilViewport;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Component that wrap two slots to create accordion element.
             * @cssprop --klevu-accordion-icon-color --klevu-h3-color Color of the icon
             * @cssprop --klevu-accordion-background transparent Header background
             * @cssprop --klevu-accordion-content-height 600px Maxium height for content
             */
            "klevu-accordion": LocalJSX.KlevuAccordion & JSXBase.HTMLAttributes<HTMLKlevuAccordionElement>;
            /**
             * Basic badge component. Can be used to display small information on top of other elements. Typically
             * used to display things on top of product.
             * @cssprop --klevu-badge-background - Background color of the badge, if accent or neutral is not set
             * @cssprop --klevu-badge-border-radius --klevu-border-radius-xxl Border radius of the badge
             */
            "klevu-badge": LocalJSX.KlevuBadge & JSXBase.HTMLAttributes<HTMLKlevuBadgeElement>;
            /**
             * Component that displays a typical klevu banner
             */
            "klevu-banner": LocalJSX.KlevuBanner & JSXBase.HTMLAttributes<HTMLKlevuBannerElement>;
            /**
             * Basic button component
             * @csspart button-base The button element
             * @cssprop --klevu-button-background-color --klevu-color-primary Background color of button
             * @cssprop --klevu-button-border --klevu-color-primary-border Border color of button
             * @cssprop --klevu-button-text-color --klevu-color-primary-text Button text color
             * @cssprop --klebu-button-padding --klevu-spacing-04 Padding on button
             * @cssprop --klevu-button-text-align center Align text on button
             * @cssprop --klevu-button-padding calculated Override buttom padding with custom value
             * @cssprop --klevu-button-font-size --klevu-body-s-size Size of button text
             */
            "klevu-button": LocalJSX.KlevuButton & JSXBase.HTMLAttributes<HTMLKlevuButtonElement>;
            /**
             * Container for chat items. Very simple component, just a wrapper.
             * @cssprop --klevu-chat-bubble-background --klevu-color-neutral-2 Background color of the bubble
             * @cssprop --klevu-chat-bubble-background-remote --klevu-color-primary Background color of the bubble when remote
             * @cssprop --klevu-chat-bubble-text-color inherit Text color of the bubble
             * @cssprop --klevu-chat-bubble-text-color-remote --klevu-color-neutral-1 Text color of the bubble when remote
             */
            "klevu-chat-bubble": LocalJSX.KlevuChatBubble & JSXBase.HTMLAttributes<HTMLKlevuChatBubbleElement>;
            /**
             * Component that wraps chat elements into a layout.
             * @cssprop --klevu-chat-layout-max-height 100vh The maxium height for the chat layout.
             */
            "klevu-chat-layout": LocalJSX.KlevuChatLayout & JSXBase.HTMLAttributes<HTMLKlevuChatLayoutElement>;
            "klevu-chat-messages": LocalJSX.KlevuChatMessages & JSXBase.HTMLAttributes<HTMLKlevuChatMessagesElement>;
            /**
             * Checkbox component
             * @cssprop --klevu-checkbox-color --klevu-color-primary Color of the checkbox background and border
             * @cssprop --klevu-checkbox-size 20px Size of the checkbox
             */
            "klevu-checkbox": LocalJSX.KlevuCheckbox & JSXBase.HTMLAttributes<HTMLKlevuCheckboxElement>;
            /**
             * Chip component that is used to display selected value in a listing. Gives also ability to remove the chip.
             * Has selected and removable attributes that can be used to display the chip in selected state and also to remove the chip.
             * @cssprop --klevu-chip-radius --klevu-border-radius-xxl Border radius of the chip
             * @cssprop --klevu-chip-border --klevu-color-neutral-5 Border color of the chip
             * @cssprop --klevu-chip-selected-background klevu-color-primary-with-opacity Selected background color of the chip
             * @cssprop --klevu-chip-selected-border --klevu-color-primary Selected border color of the chip
             */
            "klevu-chip": LocalJSX.KlevuChip & JSXBase.HTMLAttributes<HTMLKlevuChipElement>;
            /**
             * Component to display list of CMS page results
             */
            "klevu-cms-list": LocalJSX.KlevuCmsList & JSXBase.HTMLAttributes<HTMLKlevuCmsListElement>;
            /**
             * Color Swatch component
             * @cssprop --klevu-color-swatch-border #8c8c8c Border on swatch
             * @cssprop --klevu-color-swatch-default-background #000 Shown when color not found in css
             * @cssprop --klevu-color-swatch-size 25px Size of swatch
             * @cssprop --klevu-color-swatch-selected-color #2b4af7 Ring color when selected
             * @cssprop --klevu-color-swatch-border-radius 50% To change the shape of swatch
             */
            "klevu-color-swatch": LocalJSX.KlevuColorSwatch & JSXBase.HTMLAttributes<HTMLKlevuColorSwatchElement>;
            /**
             * Component to create offscreen drawer on left or right side of the screen
             * @cssprop --klevu-drawer-max-width max-content maxium width of drawer content
             * @cssprop --klevu-drawer-background-color rgba(0,0,0,0.2) color of backround overlay
             * @cssprop --klevu-drawer-width 400px width of drawer
             */
            "klevu-drawer": LocalJSX.KlevuDrawer & JSXBase.HTMLAttributes<HTMLKlevuDrawerElement>;
            /**
             * Simple native dropdown component for dropdown
             * @cssprop --klevu-dropdown-icon-clip-path polygon shape of the cut of icon
             * @cssprop --klevu-dropdown-icon-color --klevu-color-primary icon color
             */
            "klevu-dropdown": LocalJSX.KlevuDropdown & JSXBase.HTMLAttributes<HTMLKlevuDropdownElement>;
            /**
             * Rendering items of single facet with all its options or a slider.
             * Manager property must be set for this component to work.
             * @csspart facet-heading Heading of the facet
             */
            "klevu-facet": LocalJSX.KlevuFacet & JSXBase.HTMLAttributes<HTMLKlevuFacetElement>;
            /**
             * Render all facets of filter manager
             * @cssprop --klevu-face-list-width 200px Width of the facet listing
             */
            "klevu-facet-list": LocalJSX.KlevuFacetList & JSXBase.HTMLAttributes<HTMLKlevuFacetListElement>;
            /**
             * Klevu icon component. Uses Google Material Icons.
             */
            "klevu-icon": LocalJSX.KlevuIcon & JSXBase.HTMLAttributes<HTMLKlevuIconElement>;
            /**
             * This component allows you to select an image from the file system.
             */
            "klevu-image-picker": LocalJSX.KlevuImagePicker & JSXBase.HTMLAttributes<HTMLKlevuImagePickerElement>;
            /**
             * `klevu-init` is the most important component of the whole library. Place one in your document. It should be
             * one of the first ones in the `<body>` tag. Currently only one `klevu-init` per page is supported. It is used to define
             * configuration for all components on the page and provide few global settings for all components:
             * - **onItemClick:** what happens when product is clicked. Typically this places default action of
             *   _klevu-product_ click. For example you can make your own frontend router to act in this function. Is
             *   provided with product and click event as attributes. Remember to preventDefault and return false to prevent anchor
             *   link following.
             * - **generateProductUrl:** what kind of URL's should be generated for products. If _onItemClick_
             *   is not used this can be used for it. Has product as attribute.
             * - **renderPrice:** generic function for price rendering. If you wish to have your own formatting for price
             *   rendering then this is the place. Has two attribute amount and currency of item.
             * Initializes components to fetch data from correct Klevu backend
             * Klevu init also initializes Google Material Icon font. It automatically injects the font to the page.
             * **Note: All global CSS variables are documented in `klevu-init` even thought they are not defined in it.**
             * @cssprop --klevu-color-primary #2b4af7 The primary color
             * @cssprop --klevu-color-primary-darker #0d2ee8  Darker variant of primary color
             * @cssprop --klevu-color-positive #2e9c40 Positive color
             * @cssprop --klevu-color-negative #ad2d2d Negative color
             * @cssprop --klevu-color-neutral-1 #ffffff Background color
             * @cssprop --klevu-color-neutral-2 #f6f6f6
             * @cssprop --klevu-color-neutral-3 #ededed
             * @cssprop --klevu-color-neutral-4 #e3e3e3
             * @cssprop --klevu-color-neutral-5 #d6d6d6
             * @cssprop --klevu-color-neutral-6 #919191
             * @cssprop --klevu-color-neutral-7 #757575
             * @cssprop --klevu-color-neutral-8 #191919 Text color
             * @cssprop --klevu-color-accent-1 #8eedd3 Accent color
             * @cssprop --klevu-color-accent-2 #ffcb9f Accent color
             * @cssprop --klevu-color-accent-3 #ffb8d6 Accent color
             * @cssprop --klevu-color-accent-4 #c3d7ff Accent color
             * @cssprop --klevu-spacing-01 1px Spacing 01
             * @cssprop --klevu-spacing-02 4px Spacing 02
             * @cssprop --klevu-spacing-03 8px Spacing 03
             * @cssprop --klevu-spacing-04 12px Spacing 04
             * @cssprop --klevu-spacing-05 16px Spacing 05
             * @cssprop --klevu-spacing-06 24px Spacing 06
             * @cssprop --klevu-spacing-07 32px Spacing 07
             * @cssprop --klevu-spacing-08 40px Spacing 08
             * @cssprop --klevu-spacing-09 48px Spacing 09
             * @cssprop --klevu-spacing-10 64px Spacing 10
             */
            "klevu-init": LocalJSX.KlevuInit & JSXBase.HTMLAttributes<HTMLKlevuInitElement>;
            /**
             * Lists latest searches user has made on the site
             */
            "klevu-latest-searches": LocalJSX.KlevuLatestSearches & JSXBase.HTMLAttributes<HTMLKlevuLatestSearchesElement>;
            /**
             * Generic layout used in merchansiding and search landing page
             */
            "klevu-layout-results": LocalJSX.KlevuLayoutResults & JSXBase.HTMLAttributes<HTMLKlevuLayoutResultsElement>;
            /**
             * Single list item for listing things.
             */
            "klevu-list": LocalJSX.KlevuList & JSXBase.HTMLAttributes<HTMLKlevuListElement>;
            /**
             * Simple loading indicator
             * @cssprop --klevu-loading-indicator-color --klevu-color-primary Color of the loading indicator
             */
            "klevu-loading-indicator": LocalJSX.KlevuLoadingIndicator & JSXBase.HTMLAttributes<HTMLKlevuLoadingIndicatorElement>;
            /**
             * Full merchandising app to power up your product grid pages
             */
            "klevu-merchandising": LocalJSX.KlevuMerchandising & JSXBase.HTMLAttributes<HTMLKlevuMerchandisingElement>;
            /**
             * Stylized modal dialog.
             */
            "klevu-modal": LocalJSX.KlevuModal & JSXBase.HTMLAttributes<HTMLKlevuModalElement>;
            /**
             * Klevu MOI Application
             */
            "klevu-moi": LocalJSX.KlevuMoi & JSXBase.HTMLAttributes<HTMLKlevuMoiElement>;
            /**
             * Pagination component. Either provide numbers or query result to display the component.
             * @cssprop --klevu-pagination-background-color --klevu-color-dim-background background color of item
             * @cssprop --klevu-pagination-text-color - text color of item
             * @cssprop --klevu-pagination-selected-background-color --klevu-color-primary background color of selected item
             * @cssprop --klevu-pagination-selected-text-color --klevu-color-primary-text text color of selected item
             */
            "klevu-pagination": LocalJSX.KlevuPagination & JSXBase.HTMLAttributes<HTMLKlevuPaginationElement>;
            /**
             * Fetches and displays most popular searches from Klevu Merchant center
             */
            "klevu-popular-searches": LocalJSX.KlevuPopularSearches & JSXBase.HTMLAttributes<HTMLKlevuPopularSearchesElement>;
            /**
             * Popup component where clicking origin component popups the the content
             * @csspart popup-origin Origin component
             * @csspart popup-content Content component
             */
            "klevu-popup": LocalJSX.KlevuPopup & JSXBase.HTMLAttributes<HTMLKlevuPopupElement>;
            /**
             * Generic product component that renders product based on KlevuRecord of klevu/core
             * All parts of the component can be replaced with slots.
             * By default the products fill the whole space, but it can be limited
             * with --klevu-product-width and --klevu-product-small-width css variables.
             * @csspart product-image The image element of component
             * @csspart product-container The container element of whole
             * @csspart product-swatch Single swatch element under the image
             * @cssprop --klevu-product-width - Width of the product
             * @cssprop --klevu-product-small-width - Width of the product when small variant is used
             * @cssprop --klevu-product-image-aspect-ratio - On what aspect the background image will be
             * @cssprop --klevu-product-image-fill - How to fill image to it's space.
             * @cssprop --klevu-product-border none Border style of the product
             */
            "klevu-product": LocalJSX.KlevuProduct & JSXBase.HTMLAttributes<HTMLKlevuProductElement>;
            /**
             * Component to place products on grid. Very simple container for products.
             * @cssprop --klevu-product-grid-spacing --klevu-spacing-05 spacing between grid items;
             */
            "klevu-product-grid": LocalJSX.KlevuProductGrid & JSXBase.HTMLAttributes<HTMLKlevuProductGridElement>;
            /**
             * Button that is placed on the site to start a product query session
             * @csspart product-query-header Header of the popup
             * @csspart product-query-footer Footer of the popup where input is
             * @csspart product-query-feedback Feedback section of the popup when it is being closed
             * @csspart product-query-open-button Button that opens the popup
             * @csspart product-query-button-icon Icon of the button that opens the popup
             * @csspart popup-origin Popup origin element
             * @csspart popup-content Popup content element
             * @csspart button-base The button element
             */
            "klevu-product-query": LocalJSX.KlevuProductQuery & JSXBase.HTMLAttributes<HTMLKlevuProductQueryElement>;
            /**
             * Klevu Product Query popup application that shows a popup for asking questions about a product
             * @csspart product-query-header Header of the popup
             * @csspart product-query-footer Footer of the popup where input is
             * @csspart product-query-feedback Feedback section of the popup when it is being closed
             * @csspart product-query-open-button Button that opens the popup
             * @csspart popup-origin Popup origin element
             * @csspart popup-content Popup content element
             */
            "klevu-product-query-popup": LocalJSX.KlevuProductQueryPopup & JSXBase.HTMLAttributes<HTMLKlevuProductQueryPopupElement>;
            /**
             * __klevu-query__ component is a special kind of component that makes queries to Klevu defined by the
             * __type__ parameter. It also listens to clicks to __klevu-product__ -component and sends analytical data to Klevu
             * based on that. This components gives you ability to create any kind of UI with Klevu components or by using your own
             * components! Just use __klevu-query__ to fetch the data and __klevu-product__ to render the product
             * cards. Whole content of __klevu-product__ can be replaced with your content.
             */
            "klevu-query": LocalJSX.KlevuQuery & JSXBase.HTMLAttributes<HTMLKlevuQueryElement>;
            /**
             * Full app to create search bar that popups trending products and search results.
             */
            "klevu-quicksearch": LocalJSX.KlevuQuicksearch & JSXBase.HTMLAttributes<HTMLKlevuQuicksearchElement>;
            /**
             * Klevu ratings component
             * @prop rating - The rating value as a number to show
             * @prop ratingRange - The number of stars to show
             */
            "klevu-rating": LocalJSX.KlevuRating & JSXBase.HTMLAttributes<HTMLKlevuRatingElement>;
            /**
             * Full recommendation banner solution
             */
            "klevu-recommendations": LocalJSX.KlevuRecommendations & JSXBase.HTMLAttributes<HTMLKlevuRecommendationsElement>;
            /**
             * Plain textfield that does the searching. It queries Klevu and returns the results
             * in a custom event. Then you can decide what to do with the results.
             */
            "klevu-search-field": LocalJSX.KlevuSearchField & JSXBase.HTMLAttributes<HTMLKlevuSearchFieldElement>;
            /**
             * Full app component for search landing page
             */
            "klevu-search-landing-page": LocalJSX.KlevuSearchLandingPage & JSXBase.HTMLAttributes<HTMLKlevuSearchLandingPageElement>;
            /**
             * Horizontal slider component. By default used for price range in this package. But can
             * be used for other purposes as well.
             */
            "klevu-slider": LocalJSX.KlevuSlider & JSXBase.HTMLAttributes<HTMLKlevuSliderElement>;
            /**
             * Horizontal slides component. Can be used to display a list of items horizontally. Has optional title and next/prev buttons.
             * @cssprop --klevu-slides-item-width - Force a width for each item in the slides
             */
            "klevu-slides": LocalJSX.KlevuSlides & JSXBase.HTMLAttributes<HTMLKlevuSlidesElement>;
            /**
             * Sort dropdown. User can select what kind of sorting they want
             */
            "klevu-sort": LocalJSX.KlevuSort & JSXBase.HTMLAttributes<HTMLKlevuSortElement>;
            /**
             * Simple component to list suggestions. Takes in a parameter suggestions that will be rendered as a list
             */
            "klevu-suggestions-list": LocalJSX.KlevuSuggestionsList & JSXBase.HTMLAttributes<HTMLKlevuSuggestionsListElement>;
            /**
             * Very simple tab component. Use like a button, but with a caption.
             * Use standard onClick event to handle click.
             */
            "klevu-tab": LocalJSX.KlevuTab & JSXBase.HTMLAttributes<HTMLKlevuTabElement>;
            /**
             * Branded text field component
             */
            "klevu-textfield": LocalJSX.KlevuTextfield & JSXBase.HTMLAttributes<HTMLKlevuTextfieldElement>;
            /**
             * Klevu typography component. This component is used in most places to set correct font in component pieces.
             * @cssprop --klevu-typography-color - Color of the text that overrides the default
             * @cssprop --klevu-typography-font-weight - Font weight that overrides the default
             * @cssprop --klevu-h1-size 24px H1 size
             * @cssprop --klevu-h1-lineheight calc(28em/24) H1 line-height
             * @cssprop --klevu-h1-weight 700 H1 weight
             * @cssprop --klevu-h2-size 20px H2 size
             * @cssprop --klevu-h2-lineheight calc(24em/20) H2 line-height
             * @cssprop --klevu-h2-weight 700 H2 weight
             * @cssprop --klevu-h3-size 16px H3 size
             * @cssprop --klevu-h3-lineheight calc(20em/16) H3 line-height
             * @cssprop --klevu-h3-weight 700 H3 weight
             * @cssprop --klevu-h4-size 14px H4 size
             * @cssprop --klevu-h4-lineheight calc(18em/14) H4 line-height
             * @cssprop --klevu-h4-weight 700 H4 weight
             * @cssprop --klevu-body-l-size 20px Body large size
             * @cssprop --klevu-body-l-line-height calc(28em/20) Body large line-height
             * @cssprop --klevu-body-m-size 16px Body medium size
             * @cssprop --klevu-body-m-line-height calc(24em/16) Body medium line-height
             * @cssprop --klevu-body-s-size 14px  Body small size
             * @cssprop --klevu-body-s-line-height calc(20em/14) Body small line-height
             * @cssprop --klevu-body-xs-size 12px Body extra small size
             * @cssprop --klevu-body-xs-line-height calc(16em/12) Body extra small line-height
             */
            "klevu-typography": LocalJSX.KlevuTypography & JSXBase.HTMLAttributes<HTMLKlevuTypographyElement>;
            /**
             * Utility compoenent that simplifies listening Klevu SDK Dom events
             * https://docs.klevu.com/headless-sdk/events-analytics#dhk6Y
             */
            "klevu-util-dom-events": LocalJSX.KlevuUtilDomEvents & JSXBase.HTMLAttributes<HTMLKlevuUtilDomEventsElement>;
            /**
             * Component that triggers event when intercepted on scroll of page.
             */
            "klevu-util-infinite-scroll": LocalJSX.KlevuUtilInfiniteScroll & JSXBase.HTMLAttributes<HTMLKlevuUtilInfiniteScrollElement>;
            /**
             * Portal component to move content to end of body instead of normal DOM position. Typically used for popups
             * to prevent problems with CSS stylings.
             * Does not move styles, so create a child component that has styles defined in shadow DOM.
             */
            "klevu-util-portal": LocalJSX.KlevuUtilPortal & JSXBase.HTMLAttributes<HTMLKlevuUtilPortalElement>;
            /**
             * Utility that replaces the default browser scrollbar with a custom one.
             * @cssprop --klevu-util-scrollbar-handle-bg --klevu-color-neutral-5 The background color of the scrollbar handle.
             * @cssprop --klevu-util-scrollbar-handle-bg-hover --klevu-color-neutral-6 The background color of the scrollbar handle when hovered.
             * @cssprop --klevu-util-scrollbar-handle-bg-active --klevu-color-neutral-7 The background color of the scrollbar handle when active.
             */
            "klevu-util-scrollbars": LocalJSX.KlevuUtilScrollbars & JSXBase.HTMLAttributes<HTMLKlevuUtilScrollbarsElement>;
            "klevu-util-viewport": LocalJSX.KlevuUtilViewport & JSXBase.HTMLAttributes<HTMLKlevuUtilViewportElement>;
        }
    }
}
