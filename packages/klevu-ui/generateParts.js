const json = require("./dist/docs/klevu-ui-docs.json")
const fs = require("fs")

let output = `/* Automatically generated by generateParts.js - Do not modify by hand - Use "npm run generate:parts" to update */
export const parts = {`

for (const component of json.components) {
  const parts = component.docsTags.filter(t => t.name === "csspart").map(t => t.text.split(" ")[0])

  let exportedparts = {}
  const depComp = Object.keys(component.dependencyGraph)
  const depsToCheck = []
  for (const dependency of depComp) {
    for (const subDep of component.dependencyGraph[dependency]) {
      if (depsToCheck.indexOf(subDep) === -1 && subDep !== component.tag) {
        depsToCheck.push(subDep)
      }
    }
  }
  for (const subDep of depsToCheck) {
    const dep = json.components.find((c) => c.tag === subDep)

    if (!dep) {
      continue
    }

    const parts = dep.docsTags.filter(t => t.name === "csspart").map(t => t.text.split(" ")[0])
    const tagWithoutKlevu = dep.tag.substring(6)

    for (const part of parts) {
      if (!part.startsWith(tagWithoutKlevu)) {
        console.warn(`Part ${part} of ${dep.tag} does not start with ${tagWithoutKlevu}`)
      }
    }

    if (parts.length === 0) {
      continue
    }

    exportedparts[dep.tag] = parts
  }



  if (parts.length === 0) {
    continue
  }

  const tagWithoutKlevu = component.tag.substring(6)
  for (const part of parts) {
    if (!part.startsWith(tagWithoutKlevu)) {
      console.warn(`WARN: Part ${part} of ${component.tag} does not start with ${tagWithoutKlevu}`)
    }
  }

  output += `
  "${component.tag}": {
    local: ${JSON.stringify(parts)},
    exportedcomponents: ${JSON.stringify(exportedparts ?? [])}
  },`
}
output += `
}`


fs.writeFileSync("./src/utils/parts.ts", output)
console.log("Generated parts.ts")